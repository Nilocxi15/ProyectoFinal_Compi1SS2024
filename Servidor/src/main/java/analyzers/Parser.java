
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analyzers;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbols.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\204\000\002\002\004\000\002\002\013\000\002\006" +
    "\012\000\002\006\012\000\002\006\004\000\002\006\002" +
    "\000\002\004\012\000\002\004\003\000\002\003\011\000" +
    "\002\003\011\000\002\003\003\000\002\010\011\000\002" +
    "\010\004\000\002\010\002\000\002\007\012\000\002\007" +
    "\003\000\002\011\011\000\002\011\004\000\002\011\002" +
    "\000\002\013\014\000\002\013\007\000\002\013\013\000" +
    "\002\013\013\000\002\013\012\000\002\013\013\000\002" +
    "\013\007\000\002\013\006\000\002\013\014\000\002\013" +
    "\014\000\002\013\014\000\002\013\004\000\002\013\002" +
    "\000\002\015\012\000\002\015\012\000\002\015\012\000" +
    "\002\015\012\000\002\015\012\000\002\015\004\000\002" +
    "\015\002\000\002\016\012\000\002\016\012\000\002\016" +
    "\012\000\002\016\012\000\002\016\012\000\002\016\012" +
    "\000\002\016\004\000\002\016\002\000\002\014\012\000" +
    "\002\014\012\000\002\014\012\000\002\014\012\000\002" +
    "\014\012\000\002\014\012\000\002\014\004\000\002\014" +
    "\002\000\002\017\012\000\002\017\012\000\002\017\012" +
    "\000\002\017\012\000\002\017\012\000\002\017\004\000" +
    "\002\017\002\000\002\020\012\000\002\020\012\000\002" +
    "\020\012\000\002\020\012\000\002\020\012\000\002\020" +
    "\012\000\002\020\012\000\002\020\004\000\002\020\002" +
    "\000\002\021\012\000\002\021\012\000\002\021\012\000" +
    "\002\021\012\000\002\021\012\000\002\021\004\000\002" +
    "\021\002\000\002\024\012\000\002\024\012\000\002\024" +
    "\012\000\002\024\012\000\002\024\012\000\002\024\012" +
    "\000\002\024\012\000\002\024\004\000\002\024\002\000" +
    "\002\025\012\000\002\025\012\000\002\025\012\000\002" +
    "\025\012\000\002\025\012\000\002\025\004\000\002\025" +
    "\002\000\002\031\012\000\002\031\004\000\002\031\002" +
    "\000\002\023\010\000\002\023\014\000\002\023\007\000" +
    "\002\023\004\000\002\023\002\000\002\032\007\000\002" +
    "\032\004\000\002\032\002\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\005\004\000\002\005\004\000" +
    "\002\005\003\000\002\005\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\026\004\000\002" +
    "\026\004\000\002\026\004\000\002\026\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0249\000\004\013\004\001\002\000\004\027\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\010\003\011\015\ufffc\016\012\001\002\000\004\015" +
    "\036\001\002\000\010\003\011\015\ufffc\016\012\001\002" +
    "\000\006\053\014\054\013\001\002\000\004\004\023\001" +
    "\002\000\004\004\015\001\002\000\004\026\016\001\002" +
    "\000\004\073\017\001\002\000\004\026\020\001\002\000" +
    "\004\017\021\001\002\000\010\003\011\015\ufffc\016\012" +
    "\001\002\000\004\015\uffff\001\002\000\004\026\024\001" +
    "\002\000\006\070\026\073\027\001\002\000\004\026\032" +
    "\001\002\000\012\013\uff90\026\uff90\070\026\073\027\001" +
    "\002\000\012\013\uff8f\026\uff8f\070\026\073\027\001\002" +
    "\000\006\013\uff92\026\uff92\001\002\000\006\013\uff91\026" +
    "\uff91\001\002\000\004\017\033\001\002\000\010\003\011" +
    "\015\ufffc\016\012\001\002\000\004\015\ufffe\001\002\000" +
    "\004\015\ufffd\001\002\000\006\003\037\013\041\001\002" +
    "\000\006\003\ufffa\013\ufffa\001\002\000\006\003\100\013" +
    "\102\001\002\000\004\030\042\001\002\000\004\015\043" +
    "\001\002\000\006\003\044\013\046\001\002\000\006\003" +
    "\ufff7\013\ufff7\001\002\000\006\003\044\013\046\001\002" +
    "\000\006\031\050\032\047\001\002\000\010\003\056\015" +
    "\ufff4\016\060\001\002\000\004\015\051\001\002\000\006" +
    "\070\026\073\027\001\002\000\004\013\053\001\002\000" +
    "\004\100\054\001\002\000\004\015\055\001\002\000\006" +
    "\003\ufff9\013\ufff9\001\002\000\010\003\056\015\ufff4\016" +
    "\060\001\002\000\004\015\067\001\002\000\004\055\061" +
    "\001\002\000\004\004\062\001\002\000\004\026\063\001" +
    "\002\000\004\074\064\001\002\000\004\026\065\001\002" +
    "\000\004\017\066\001\002\000\004\015\ufff6\001\002\000" +
    "\004\013\070\001\002\000\004\101\071\001\002\000\004" +
    "\015\072\001\002\000\006\003\ufff8\013\ufff8\001\002\000" +
    "\004\015\ufff5\001\002\000\004\013\075\001\002\000\004" +
    "\077\076\001\002\000\004\015\077\001\002\000\006\003" +
    "\ufffb\013\ufffb\001\002\000\004\013\ufff2\001\002\000\004" +
    "\013\u0249\001\002\000\004\033\103\001\002\000\010\003" +
    "\104\015\uffef\016\105\001\002\000\010\003\104\015\uffef" +
    "\016\105\001\002\000\004\056\u0242\001\002\000\004\015" +
    "\107\001\002\000\004\013\110\001\002\000\034\003\123" +
    "\034\114\035\120\036\117\037\111\040\124\041\121\042" +
    "\115\043\112\044\116\045\122\046\113\102\uffe2\001\002" +
    "\000\010\003\u020a\015\uffc4\016\u020c\001\002\000\004\015" +
    "\u0207\001\002\000\010\003\160\015\uffa4\016\162\001\002" +
    "\000\010\003\u01c3\015\uffdb\016\u01c4\001\002\000\010\003" +
    "\u018f\015\uffb4\016\u0191\001\002\000\010\003\u014f\015\uffab" +
    "\016\u0150\001\002\000\010\003\u0119\015\uffcb\016\u011b\001" +
    "\002\000\010\003\350\015\uffd3\016\351\001\002\000\010" +
    "\003\252\015\uffbb\016\253\001\002\000\010\003\160\015" +
    "\uffa4\016\162\001\002\000\036\003\123\034\114\035\120" +
    "\036\117\037\111\040\124\041\121\042\115\043\112\044" +
    "\116\045\122\046\113\102\uffe2\107\uffe2\001\002\000\004" +
    "\015\130\001\002\000\004\102\126\001\002\000\004\015" +
    "\127\001\002\000\004\013\ufff3\001\002\000\034\004\146" +
    "\005\144\006\133\007\132\010\142\013\uff7e\016\137\017" +
    "\134\024\131\025\145\026\143\070\140\073\135\001\002" +
    "\000\034\004\uff89\005\uff89\006\uff89\007\uff89\010\uff89\013" +
    "\uff89\016\uff89\017\uff89\024\uff89\025\uff89\026\uff89\070\uff89" +
    "\073\uff89\001\002\000\034\004\uff8b\005\uff8b\006\uff8b\007" +
    "\uff8b\010\uff8b\013\uff8b\016\uff8b\017\uff8b\024\uff8b\025\uff8b" +
    "\026\uff8b\070\uff8b\073\uff8b\001\002\000\034\004\uff8c\005" +
    "\uff8c\006\uff8c\007\uff8c\010\uff8c\013\uff8c\016\uff8c\017\uff8c" +
    "\024\uff8c\025\uff8c\026\uff8c\070\uff8c\073\uff8c\001\002\000" +
    "\034\004\uff85\005\uff85\006\uff85\007\uff85\010\uff85\013\uff85" +
    "\016\uff85\017\uff85\024\uff85\025\uff85\026\uff85\070\uff85\073" +
    "\uff85\001\002\000\034\004\146\005\144\006\133\007\132" +
    "\010\142\013\uff7e\016\137\017\134\024\131\025\145\026" +
    "\143\070\140\073\135\001\002\000\034\004\146\005\144" +
    "\006\133\007\132\010\142\013\uff7e\016\137\017\134\024" +
    "\131\025\145\026\143\070\140\073\135\001\002\000\034" +
    "\004\uff86\005\uff86\006\uff86\007\uff86\010\uff86\013\uff86\016" +
    "\uff86\017\uff86\024\uff86\025\uff86\026\uff86\070\uff86\073\uff86" +
    "\001\002\000\034\004\146\005\144\006\133\007\132\010" +
    "\142\013\uff7e\016\137\017\134\024\131\025\145\026\143" +
    "\070\140\073\135\001\002\000\004\013\147\001\002\000" +
    "\034\004\uff8a\005\uff8a\006\uff8a\007\uff8a\010\uff8a\013\uff8a" +
    "\016\uff8a\017\uff8a\024\uff8a\025\uff8a\026\uff8a\070\uff8a\073" +
    "\uff8a\001\002\000\034\004\uff87\005\uff87\006\uff87\007\uff87" +
    "\010\uff87\013\uff87\016\uff87\017\uff87\024\uff87\025\uff87\026" +
    "\uff87\070\uff87\073\uff87\001\002\000\034\004\uff8d\005\uff8d" +
    "\006\uff8d\007\uff8d\010\uff8d\013\uff8d\016\uff8d\017\uff8d\024" +
    "\uff8d\025\uff8d\026\uff8d\070\uff8d\073\uff8d\001\002\000\034" +
    "\004\uff88\005\uff88\006\uff88\007\uff88\010\uff88\013\uff88\016" +
    "\uff88\017\uff88\024\uff88\025\uff88\026\uff88\070\uff88\073\uff88" +
    "\001\002\000\034\004\uff8e\005\uff8e\006\uff8e\007\uff8e\010" +
    "\uff8e\013\uff8e\016\uff8e\017\uff8e\024\uff8e\025\uff8e\026\uff8e" +
    "\070\uff8e\073\uff8e\001\002\000\004\106\150\001\002\000" +
    "\004\015\151\001\002\000\004\013\152\001\002\000\036" +
    "\003\123\034\114\035\120\036\117\037\111\040\124\041" +
    "\121\042\115\043\112\044\116\045\122\046\113\102\uffe2" +
    "\107\uffe2\001\002\000\006\102\uffea\107\uffea\001\002\000" +
    "\004\013\uff80\001\002\000\004\013\uff7f\001\002\000\004" +
    "\013\uff81\001\002\000\006\102\uffe3\107\uffe3\001\002\000" +
    "\010\003\160\015\uffa4\016\162\001\002\000\004\015\231" +
    "\001\002\000\014\053\167\057\164\060\163\061\166\075" +
    "\165\001\002\000\004\004\223\001\002\000\004\004\212" +
    "\001\002\000\004\004\204\001\002\000\004\004\176\001" +
    "\002\000\004\004\170\001\002\000\004\026\171\001\002" +
    "\000\004\073\172\001\002\000\004\026\173\001\002\000" +
    "\004\017\174\001\002\000\010\003\160\015\uffa4\016\162" +
    "\001\002\000\004\015\uffa7\001\002\000\004\026\177\001" +
    "\002\000\004\050\200\001\002\000\004\026\201\001\002" +
    "\000\004\017\202\001\002\000\010\003\160\015\uffa4\016" +
    "\162\001\002\000\004\015\uffa9\001\002\000\004\026\205" +
    "\001\002\000\004\051\206\001\002\000\004\026\207\001" +
    "\002\000\004\017\210\001\002\000\010\003\160\015\uffa4" +
    "\016\162\001\002\000\004\015\uffa8\001\002\000\004\026" +
    "\213\001\002\000\010\003\215\047\217\071\216\001\002" +
    "\000\004\026\220\001\002\000\004\026\uff96\001\002\000" +
    "\004\026\uff98\001\002\000\004\026\uff97\001\002\000\004" +
    "\017\221\001\002\000\010\003\160\015\uffa4\016\162\001" +
    "\002\000\004\015\uffa6\001\002\000\004\026\224\001\002" +
    "\000\004\072\225\001\002\000\004\026\226\001\002\000" +
    "\004\017\227\001\002\000\010\003\160\015\uffa4\016\162" +
    "\001\002\000\004\015\uffaa\001\002\000\034\004\146\005" +
    "\144\006\133\007\132\010\142\013\uff7e\016\137\017\134" +
    "\024\131\025\145\026\143\070\140\073\135\001\002\000" +
    "\004\013\233\001\002\000\010\003\234\043\235\111\uff99" +
    "\001\002\000\014\003\234\043\235\103\uff99\111\uff99\112" +
    "\uff99\001\002\000\004\015\243\001\002\000\004\111\237" +
    "\001\002\000\004\015\240\001\002\000\004\013\241\001" +
    "\002\000\036\003\123\034\114\035\120\036\117\037\111" +
    "\040\124\041\121\042\115\043\112\044\116\045\122\046" +
    "\113\102\uffe2\107\uffe2\001\002\000\006\102\uffe5\107\uffe5" +
    "\001\002\000\034\004\146\005\144\006\133\007\132\010" +
    "\142\013\uff7e\016\137\017\134\024\131\025\145\026\143" +
    "\070\140\073\135\001\002\000\004\013\245\001\002\000" +
    "\014\003\234\043\235\103\uff99\111\uff99\112\uff99\001\002" +
    "\000\010\103\uff9b\111\uff9b\112\uff9b\001\002\000\010\103" +
    "\uff9a\111\uff9a\112\uff9a\001\002\000\004\015\uffa5\001\002" +
    "\000\004\015\341\001\002\000\010\003\252\015\uffbb\016" +
    "\253\001\002\000\020\053\262\056\255\057\256\060\254" +
    "\061\261\075\260\114\257\001\002\000\004\004\332\001" +
    "\002\000\004\004\324\001\002\000\004\004\316\001\002" +
    "\000\004\004\305\001\002\000\004\004\277\001\002\000" +
    "\004\004\271\001\002\000\004\004\263\001\002\000\004" +
    "\026\264\001\002\000\004\073\265\001\002\000\004\026" +
    "\266\001\002\000\004\017\267\001\002\000\010\003\252" +
    "\015\uffbb\016\253\001\002\000\004\015\uffc0\001\002\000" +
    "\004\026\272\001\002\000\004\050\273\001\002\000\004" +
    "\026\274\001\002\000\004\017\275\001\002\000\010\003" +
    "\252\015\uffbb\016\253\001\002\000\004\015\uffc2\001\002" +
    "\000\004\026\300\001\002\000\004\051\301\001\002\000" +
    "\004\026\302\001\002\000\004\017\303\001\002\000\010" +
    "\003\252\015\uffbb\016\253\001\002\000\004\015\uffc1\001" +
    "\002\000\004\026\306\001\002\000\010\003\310\115\311" +
    "\116\307\001\002\000\004\026\uff84\001\002\000\004\026" +
    "\uff82\001\002\000\004\026\uff83\001\002\000\004\026\313" +
    "\001\002\000\004\017\314\001\002\000\010\003\252\015" +
    "\uffbb\016\253\001\002\000\004\015\uffbf\001\002\000\004" +
    "\026\317\001\002\000\010\003\215\047\217\071\216\001" +
    "\002\000\004\026\321\001\002\000\004\017\322\001\002" +
    "\000\010\003\252\015\uffbb\016\253\001\002\000\004\015" +
    "\uffbe\001\002\000\004\026\325\001\002\000\010\003\215" +
    "\047\217\071\216\001\002\000\004\026\327\001\002\000" +
    "\004\017\330\001\002\000\010\003\252\015\uffbb\016\253" +
    "\001\002\000\004\015\uffbd\001\002\000\004\026\333\001" +
    "\002\000\004\072\334\001\002\000\004\026\335\001\002" +
    "\000\004\017\336\001\002\000\010\003\252\015\uffbb\016" +
    "\253\001\002\000\004\015\uffc3\001\002\000\004\015\uffbc" +
    "\001\002\000\004\013\342\001\002\000\034\003\123\034" +
    "\114\035\120\036\117\037\111\040\124\041\121\042\115" +
    "\043\112\044\116\045\122\046\113\107\uffe2\001\002\000" +
    "\004\107\344\001\002\000\004\015\345\001\002\000\004" +
    "\013\346\001\002\000\036\003\123\034\114\035\120\036" +
    "\117\037\111\040\124\041\121\042\115\043\112\044\116" +
    "\045\122\046\113\102\uffe2\107\uffe2\001\002\000\006\102" +
    "\uffe9\107\uffe9\001\002\000\010\003\350\015\uffd3\016\351" +
    "\001\002\000\016\053\363\057\357\060\356\061\361\063" +
    "\362\075\360\001\002\000\004\015\353\001\002\000\004" +
    "\013\354\001\002\000\036\003\123\034\114\035\120\036" +
    "\117\037\111\040\124\041\121\042\115\043\112\044\116" +
    "\045\122\046\113\102\uffe2\107\uffe2\001\002\000\006\102" +
    "\uffed\107\uffed\001\002\000\004\004\u0112\001\002\000\004" +
    "\004\u010c\001\002\000\004\004\u0106\001\002\000\004\004" +
    "\u0100\001\002\000\004\004\372\001\002\000\004\004\364" +
    "\001\002\000\004\026\365\001\002\000\004\073\366\001" +
    "\002\000\004\026\367\001\002\000\004\017\370\001\002" +
    "\000\010\003\350\015\uffd3\016\351\001\002\000\004\015" +
    "\uffd6\001\002\000\004\026\373\001\002\000\004\052\374" +
    "\001\002\000\004\026\375\001\002\000\004\017\376\001" +
    "\002\000\010\003\350\015\uffd3\016\351\001\002\000\004" +
    "\015\uffda\001\002\000\004\026\u0101\001\002\000\004\050" +
    "\u0102\001\002\000\004\026\u0103\001\002\000\004\017\u0104" +
    "\001\002\000\010\003\350\015\uffd3\016\351\001\002\000" +
    "\004\015\uffd8\001\002\000\004\026\u0107\001\002\000\004" +
    "\051\u0108\001\002\000\004\026\u0109\001\002\000\004\017" +
    "\u010a\001\002\000\010\003\350\015\uffd3\016\351\001\002" +
    "\000\004\015\uffd7\001\002\000\004\026\u010d\001\002\000" +
    "\010\003\215\047\217\071\216\001\002\000\004\026\u010f" +
    "\001\002\000\004\017\u0110\001\002\000\010\003\350\015" +
    "\uffd3\016\351\001\002\000\004\015\uffd5\001\002\000\004" +
    "\026\u0113\001\002\000\004\072\u0114\001\002\000\004\026" +
    "\u0115\001\002\000\004\017\u0116\001\002\000\010\003\350" +
    "\015\uffd3\016\351\001\002\000\004\015\uffd9\001\002\000" +
    "\004\015\uffd4\001\002\000\010\003\u0119\015\uffcb\016\u011b" +
    "\001\002\000\004\015\u0146\001\002\000\016\053\u0121\060" +
    "\u011c\061\u0120\064\u011d\065\u011f\075\u011e\001\002\000\004" +
    "\004\u0140\001\002\000\004\004\u013a\001\002\000\004\004" +
    "\u0134\001\002\000\004\004\u012e\001\002\000\004\004\u0128" +
    "\001\002\000\004\004\u0122\001\002\000\004\026\u0123\001" +
    "\002\000\004\073\u0124\001\002\000\004\026\u0125\001\002" +
    "\000\004\017\u0126\001\002\000\010\003\u0119\015\uffcb\016" +
    "\u011b\001\002\000\004\015\uffcf\001\002\000\004\026\u0129" +
    "\001\002\000\004\050\u012a\001\002\000\004\026\u012b\001" +
    "\002\000\004\017\u012c\001\002\000\010\003\u0119\015\uffcb" +
    "\016\u011b\001\002\000\004\015\uffd1\001\002\000\004\026" +
    "\u012f\001\002\000\004\070\u0130\001\002\000\004\026\u0131" +
    "\001\002\000\004\017\u0132\001\002\000\010\003\u0119\015" +
    "\uffcb\016\u011b\001\002\000\004\015\uffcd\001\002\000\004" +
    "\026\u0135\001\002\000\004\051\u0136\001\002\000\004\026" +
    "\u0137\001\002\000\004\017\u0138\001\002\000\010\003\u0119" +
    "\015\uffcb\016\u011b\001\002\000\004\015\uffd0\001\002\000" +
    "\004\026\u013b\001\002\000\004\070\u013c\001\002\000\004" +
    "\026\u013d\001\002\000\004\017\u013e\001\002\000\010\003" +
    "\u0119\015\uffcb\016\u011b\001\002\000\004\015\uffce\001\002" +
    "\000\004\026\u0141\001\002\000\004\072\u0142\001\002\000" +
    "\004\026\u0143\001\002\000\004\017\u0144\001\002\000\010" +
    "\003\u0119\015\uffcb\016\u011b\001\002\000\004\015\uffd2\001" +
    "\002\000\034\004\146\005\144\006\133\007\132\010\142" +
    "\013\uff7e\016\137\017\134\024\131\025\145\026\143\070" +
    "\140\073\135\001\002\000\004\013\u0148\001\002\000\004" +
    "\104\u0149\001\002\000\004\015\u014a\001\002\000\004\013" +
    "\u014b\001\002\000\036\003\123\034\114\035\120\036\117" +
    "\037\111\040\124\041\121\042\115\043\112\044\116\045" +
    "\122\046\113\102\uffe2\107\uffe2\001\002\000\006\102\uffec" +
    "\107\uffec\001\002\000\004\015\uffcc\001\002\000\004\015" +
    "\u0183\001\002\000\010\003\u014f\015\uffab\016\u0150\001\002" +
    "\000\020\053\u0157\056\u0151\057\u0153\060\u0152\061\u0156\066" +
    "\u0154\075\u0155\001\002\000\004\004\u017c\001\002\000\004" +
    "\004\u0176\001\002\000\004\004\u0170\001\002\000\004\004" +
    "\u016a\001\002\000\004\004\u0164\001\002\000\004\004\u015e" +
    "\001\002\000\004\004\u0158\001\002\000\004\026\u0159\001" +
    "\002\000\004\073\u015a\001\002\000\004\026\u015b\001\002" +
    "\000\004\017\u015c\001\002\000\010\003\u014f\015\uffab\016" +
    "\u0150\001\002\000\004\015\uffb0\001\002\000\004\026\u015f" +
    "\001\002\000\004\050\u0160\001\002\000\004\026\u0161\001" +
    "\002\000\004\017\u0162\001\002\000\010\003\u014f\015\uffab" +
    "\016\u0150\001\002\000\004\015\uffb2\001\002\000\004\026" +
    "\u0165\001\002\000\004\051\u0166\001\002\000\004\026\u0167" +
    "\001\002\000\004\017\u0168\001\002\000\010\003\u014f\015" +
    "\uffab\016\u0150\001\002\000\004\015\uffb1\001\002\000\004" +
    "\026\u016b\001\002\000\004\122\u016c\001\002\000\004\026" +
    "\u016d\001\002\000\004\017\u016e\001\002\000\010\003\u014f" +
    "\015\uffab\016\u0150\001\002\000\004\015\uffad\001\002\000" +
    "\004\026\u0171\001\002\000\010\003\215\047\217\071\216" +
    "\001\002\000\004\026\u0173\001\002\000\004\017\u0174\001" +
    "\002\000\010\003\u014f\015\uffab\016\u0150\001\002\000\004" +
    "\015\uffaf\001\002\000\004\026\u0177\001\002\000\004\072" +
    "\u0178\001\002\000\004\026\u0179\001\002\000\004\017\u017a" +
    "\001\002\000\010\003\u014f\015\uffab\016\u0150\001\002\000" +
    "\004\015\uffb3\001\002\000\004\026\u017d\001\002\000\010" +
    "\003\215\047\217\071\216\001\002\000\004\026\u017f\001" +
    "\002\000\004\017\u0180\001\002\000\010\003\u014f\015\uffab" +
    "\016\u0150\001\002\000\004\015\uffae\001\002\000\004\015" +
    "\uffac\001\002\000\034\004\146\005\144\006\133\007\132" +
    "\010\142\013\uff7e\016\137\017\134\024\131\025\145\026" +
    "\143\070\140\073\135\001\002\000\004\013\u0185\001\002" +
    "\000\014\003\u0187\034\u0186\042\u0189\043\u0188\110\uff9c\001" +
    "\002\000\010\003\u01c3\015\uffdb\016\u01c4\001\002\000\014" +
    "\003\u0187\034\u0186\042\u0189\043\u0188\110\uff9c\001\002\000" +
    "\004\015\u01bd\001\002\000\010\003\u018f\015\uffb4\016\u0191" +
    "\001\002\000\004\110\u018b\001\002\000\004\015\u018c\001" +
    "\002\000\004\013\u018d\001\002\000\036\003\123\034\114" +
    "\035\120\036\117\037\111\040\124\041\121\042\115\043" +
    "\112\044\116\045\122\046\113\102\uffe2\107\uffe2\001\002" +
    "\000\006\102\uffe6\107\uffe6\001\002\000\010\003\u018f\015" +
    "\uffb4\016\u0191\001\002\000\004\015\u01b8\001\002\000\014" +
    "\053\u0196\067\u0194\117\u0195\120\u0193\121\u0192\001\002\000" +
    "\004\004\u01b2\001\002\000\004\004\u01a9\001\002\000\004" +
    "\004\u01a3\001\002\000\004\004\u019d\001\002\000\004\004" +
    "\u0197\001\002\000\004\026\u0198\001\002\000\004\073\u0199" +
    "\001\002\000\004\026\u019a\001\002\000\004\017\u019b\001" +
    "\002\000\010\003\u018f\015\uffb4\016\u0191\001\002\000\004" +
    "\015\uffb6\001\002\000\004\026\u019e\001\002\000\004\074" +
    "\u019f\001\002\000\004\026\u01a0\001\002\000\004\017\u01a1" +
    "\001\002\000\010\003\u018f\015\uffb4\016\u0191\001\002\000" +
    "\004\015\uffba\001\002\000\004\026\u01a4\001\002\000\006" +
    "\070\026\073\027\001\002\000\004\026\u01a6\001\002\000" +
    "\004\017\u01a7\001\002\000\010\003\u018f\015\uffb4\016\u0191" +
    "\001\002\000\004\015\uffb7\001\002\000\004\026\u01aa\001" +
    "\002\000\010\003\u01ac\072\u01ae\113\u01ad\001\002\000\004" +
    "\026\u01af\001\002\000\004\026\uff93\001\002\000\004\026" +
    "\uff94\001\002\000\004\026\uff95\001\002\000\004\017\u01b0" +
    "\001\002\000\010\003\u018f\015\uffb4\016\u0191\001\002\000" +
    "\004\015\uffb9\001\002\000\004\026\u01b3\001\002\000\010" +
    "\003\u01ac\072\u01ae\113\u01ad\001\002\000\004\026\u01b5\001" +
    "\002\000\004\017\u01b6\001\002\000\010\003\u018f\015\uffb4" +
    "\016\u0191\001\002\000\004\015\uffb8\001\002\000\034\004" +
    "\146\005\144\006\133\007\132\010\142\013\uff7e\016\137" +
    "\017\134\024\131\025\145\026\143\070\140\073\135\001" +
    "\002\000\004\013\u01ba\001\002\000\014\003\u0187\034\u0186" +
    "\042\u0189\043\u0188\110\uff9c\001\002\000\004\110\uffa0\001" +
    "\002\000\004\015\uffb5\001\002\000\034\004\146\005\144" +
    "\006\133\007\132\010\142\013\uff7e\016\137\017\134\024" +
    "\131\025\145\026\143\070\140\073\135\001\002\000\004" +
    "\013\u01bf\001\002\000\014\003\u0187\034\u0186\042\u0189\043" +
    "\u0188\110\uff9c\001\002\000\004\110\uff9e\001\002\000\004" +
    "\110\uff9d\001\002\000\004\015\u01e9\001\002\000\010\003" +
    "\u01c3\015\uffdb\016\u01c4\001\002\000\014\053\u01c9\057\u01c6" +
    "\060\u01c5\061\u01c8\075\u01c7\001\002\000\004\004\u01e2\001" +
    "\002\000\004\004\u01dc\001\002\000\004\004\u01d6\001\002" +
    "\000\004\004\u01d0\001\002\000\004\004\u01ca\001\002\000" +
    "\004\026\u01cb\001\002\000\004\073\u01cc\001\002\000\004" +
    "\026\u01cd\001\002\000\004\017\u01ce\001\002\000\010\003" +
    "\u01c3\015\uffdb\016\u01c4\001\002\000\004\015\uffdd\001\002" +
    "\000\004\026\u01d1\001\002\000\004\050\u01d2\001\002\000" +
    "\004\026\u01d3\001\002\000\004\017\u01d4\001\002\000\010" +
    "\003\u01c3\015\uffdb\016\u01c4\001\002\000\004\015\uffdf\001" +
    "\002\000\004\026\u01d7\001\002\000\004\051\u01d8\001\002" +
    "\000\004\026\u01d9\001\002\000\004\017\u01da\001\002\000" +
    "\010\003\u01c3\015\uffdb\016\u01c4\001\002\000\004\015\uffde" +
    "\001\002\000\004\026\u01dd\001\002\000\010\003\215\047" +
    "\217\071\216\001\002\000\004\026\u01df\001\002\000\004" +
    "\017\u01e0\001\002\000\010\003\u01c3\015\uffdb\016\u01c4\001" +
    "\002\000\004\015\uffe1\001\002\000\004\026\u01e3\001\002" +
    "\000\004\072\u01e4\001\002\000\004\026\u01e5\001\002\000" +
    "\004\017\u01e6\001\002\000\010\003\u01c3\015\uffdb\016\u01c4" +
    "\001\002\000\004\015\uffe0\001\002\000\004\015\uffdc\001" +
    "\002\000\034\004\146\005\144\006\133\007\132\010\142" +
    "\013\uff7e\016\137\017\134\024\131\025\145\026\143\070" +
    "\140\073\135\001\002\000\004\013\u01eb\001\002\000\004" +
    "\103\u01ec\001\002\000\004\015\u01ed\001\002\000\034\004" +
    "\146\005\144\006\133\007\132\010\142\013\uff7e\016\137" +
    "\017\134\024\131\025\145\026\143\070\140\073\135\001" +
    "\002\000\004\013\u01ef\001\002\000\014\003\u0187\034\u0186" +
    "\042\u0189\043\u0188\110\uff9c\001\002\000\004\110\uff9f\001" +
    "\002\000\004\015\u01f2\001\002\000\004\013\u01f3\001\002" +
    "\000\036\003\123\034\114\035\120\036\117\037\111\040" +
    "\124\041\121\042\115\043\112\044\116\045\122\046\113" +
    "\102\uffe2\107\uffe2\001\002\000\006\102\uffe8\107\uffe8\001" +
    "\002\000\004\015\u01f6\001\002\000\034\004\146\005\144" +
    "\006\133\007\132\010\142\013\uff7e\016\137\017\134\024" +
    "\131\025\145\026\143\070\140\073\135\001\002\000\004" +
    "\013\u01f8\001\002\000\010\003\234\043\235\103\uff99\001" +
    "\002\000\004\103\u01fa\001\002\000\004\015\u01fb\001\002" +
    "\000\004\013\u01fc\001\002\000\036\003\123\034\114\035" +
    "\120\036\117\037\111\040\124\041\121\042\115\043\112" +
    "\044\116\045\122\046\113\102\uffe2\107\uffe2\001\002\000" +
    "\006\102\uffee\107\uffee\001\002\000\004\015\u01ff\001\002" +
    "\000\034\004\146\005\144\006\133\007\132\010\142\013" +
    "\uff7e\016\137\017\134\024\131\025\145\026\143\070\140" +
    "\073\135\001\002\000\004\013\u0201\001\002\000\010\003" +
    "\234\043\235\112\uff99\001\002\000\004\112\u0203\001\002" +
    "\000\004\015\u0204\001\002\000\004\013\u0205\001\002\000" +
    "\036\003\123\034\114\035\120\036\117\037\111\040\124" +
    "\041\121\042\115\043\112\044\116\045\122\046\113\102" +
    "\uffe2\107\uffe2\001\002\000\006\102\uffe4\107\uffe4\001\002" +
    "\000\004\013\u0208\001\002\000\036\003\123\034\114\035" +
    "\120\036\117\037\111\040\124\041\121\042\115\043\112" +
    "\044\116\045\122\046\113\102\uffe2\107\uffe2\001\002\000" +
    "\006\102\uffe7\107\uffe7\001\002\000\010\003\u020a\015\uffc4" +
    "\016\u020c\001\002\000\004\015\u0230\001\002\000\014\053" +
    "\u0211\057\u020e\060\u020d\061\u0210\075\u020f\001\002\000\004" +
    "\004\u022a\001\002\000\004\004\u0224\001\002\000\004\004" +
    "\u021e\001\002\000\004\004\u0218\001\002\000\004\004\u0212" +
    "\001\002\000\004\026\u0213\001\002\000\004\073\u0214\001" +
    "\002\000\004\026\u0215\001\002\000\004\017\u0216\001\002" +
    "\000\010\003\u020a\015\uffc4\016\u020c\001\002\000\004\015" +
    "\uffc7\001\002\000\004\026\u0219\001\002\000\004\050\u021a" +
    "\001\002\000\004\026\u021b\001\002\000\004\017\u021c\001" +
    "\002\000\010\003\u020a\015\uffc4\016\u020c\001\002\000\004" +
    "\015\uffc9\001\002\000\004\026\u021f\001\002\000\004\051" +
    "\u0220\001\002\000\004\026\u0221\001\002\000\004\017\u0222" +
    "\001\002\000\010\003\u020a\015\uffc4\016\u020c\001\002\000" +
    "\004\015\uffc8\001\002\000\004\026\u0225\001\002\000\010" +
    "\003\215\047\217\071\216\001\002\000\004\026\u0227\001" +
    "\002\000\004\017\u0228\001\002\000\010\003\u020a\015\uffc4" +
    "\016\u020c\001\002\000\004\015\uffc6\001\002\000\004\026" +
    "\u022b\001\002\000\004\072\u022c\001\002\000\004\026\u022d" +
    "\001\002\000\004\017\u022e\001\002\000\010\003\u020a\015" +
    "\uffc4\016\u020c\001\002\000\004\015\uffca\001\002\000\004" +
    "\013\u0231\001\002\000\010\003\u0233\040\u0234\105\uffa1\001" +
    "\002\000\004\105\u023d\001\002\000\010\003\u0233\040\u0234" +
    "\105\uffa1\001\002\000\004\015\u0235\001\002\000\034\004" +
    "\146\005\144\006\133\007\132\010\142\013\uff7e\016\137" +
    "\017\134\024\131\025\145\026\143\070\140\073\135\001" +
    "\002\000\004\013\u0237\001\002\000\004\106\u0238\001\002" +
    "\000\004\015\u0239\001\002\000\004\013\u023a\001\002\000" +
    "\010\003\u0233\040\u0234\105\uffa1\001\002\000\004\105\uffa3" +
    "\001\002\000\004\105\uffa2\001\002\000\004\015\u023e\001" +
    "\002\000\004\013\u023f\001\002\000\036\003\123\034\114" +
    "\035\120\036\117\037\111\040\124\041\121\042\115\043" +
    "\112\044\116\045\122\046\113\102\uffe2\107\uffe2\001\002" +
    "\000\006\102\uffeb\107\uffeb\001\002\000\004\015\uffc5\001" +
    "\002\000\004\004\u0243\001\002\000\004\026\u0244\001\002" +
    "\000\010\003\215\047\217\071\216\001\002\000\004\026" +
    "\u0246\001\002\000\004\017\u0247\001\002\000\004\015\ufff1" +
    "\001\002\000\004\015\ufff0\001\002\000\004\076\u024a\001" +
    "\002\000\004\015\u024b\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0249\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\007\001\001" +
    "\000\002\001\001\000\004\006\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\024\001\001\000\002\001\001\000\004\005" +
    "\030\001\001\000\004\005\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\037" +
    "\001\001\000\002\001\001\000\004\007\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\044\001\001" +
    "\000\002\001\001\000\004\003\073\001\001\000\002\001" +
    "\001\000\004\010\056\001\001\000\002\001\001\000\004" +
    "\005\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\105\001\001\000\004\011\u0247\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\124\001\001\000\004\017\u020a\001\001\000" +
    "\002\001\001\000\004\025\u01fd\001\001\000\004\015\u01f4" +
    "\001\001\000\004\021\u01f0\001\001\000\004\024\u014d\001" +
    "\001\000\004\014\u0119\001\001\000\004\016\351\001\001" +
    "\000\004\020\250\001\001\000\004\025\160\001\001\000" +
    "\004\013\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\026\140\027" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\026\155\027\135\001" +
    "\001\000\006\026\154\027\135\001\001\000\002\001\001" +
    "\000\006\026\153\027\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\247\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\174\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\210\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\213\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\221\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\227\001\001\000\002\001" +
    "\001\000\006\026\231\027\135\001\001\000\002\001\001" +
    "\000\004\032\235\001\001\000\004\032\246\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\241\001\001\000\002\001\001\000" +
    "\006\026\243\027\135\001\001\000\002\001\001\000\004" +
    "\032\245\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\337\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\267" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\275" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\303" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\311\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\314\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\317\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\322\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\325\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\330\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\336\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\342\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\346\001\001\000\002\001\001\000\004\016\u0117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\354\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\370\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\376\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\u0104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\u010a\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\u010d\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\u0110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\u0116\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\u014c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\u0126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\u012c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\u0132\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\u0138\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\u013e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\u0144\001\001\000\002\001\001" +
    "\000\006\026\u0146\027\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u014b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\u0181\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\u015c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\u0162\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\u0168\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\u016e\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\u0171\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\u0174\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\u017a\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\u017d\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\u0180" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\u0183\027\135\001\001\000\002\001\001\000\004\023\u0189" +
    "\001\001\000\004\015\u01c1\001\001\000\004\023\u01c0\001" +
    "\001\000\002\001\001\000\004\021\u018f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\u018d\001\001\000\002\001\001\000\004\021\u01bb\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\u019b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\u01a1\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\u01a4\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\u01a7\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\u01aa\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\u01b0\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\u01b3" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\u01b6\001\001\000\002\001\001\000\006\026\u01b8\027\135" +
    "\001\001\000\002\001\001\000\004\023\u01ba\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\026\u01bd\027\135" +
    "\001\001\000\002\001\001\000\004\023\u01bf\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\u01e7\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\u01ce\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\u01d4\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\u01da\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\u01dd\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\u01e0\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\u01e6\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\026\u01e9\027" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\026\u01ed\027\135\001\001\000\002\001" +
    "\001\000\004\023\u01ef\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\u01f3\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\026\u01f6\027\135" +
    "\001\001\000\002\001\001\000\004\032\u01f8\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u01fc\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\u01ff\027\135\001\001\000\002\001\001\000\004" +
    "\032\u0201\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u0205\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u0208\001\001\000\002\001" +
    "\001\000\004\017\u0240\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\u0216\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\u021c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\u0222\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\u0225\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\u0228\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\u022e\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\u0231\001\001\000\002\001\001\000" +
    "\004\031\u023b\001\001\000\002\001\001\000\006\026\u0235" +
    "\027\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\u023a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u023f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\u0244\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {


  //Metodos para contar los atributos de la etiqueta C_CC
  private int ccField1 = 0;
  private int ccField2 = 0;

  private void ccFieldOne() {
    ccField1++;
  }

  private void ccFieldTwo() {
    ccField2++;
  }

  private void ccFieldReset() {
    ccField1 = 0;
    ccField2 = 0;
  }

  private void verifyCCFields() {
    if (ccField1 == 1 && ccField2 == 1) {
      System.out.println("Los campos de la etiqueta C_CC son correctos");
    }
    else if (ccField1 == 0 && ccField2 == 1) {
      System.out.println("Parametro id de la etiqueta C_CC no encontrado");
    }
    else if (ccField1 == 1 && ccField2 == 0) {
      System.out.println("Parametro name de la etiqueta C_CC no encontrado");
    }
    else {
      System.out.println("Parametros id y name de la etiqueta C_CC no encontrados");
    }
  }

  //Metodos para contar los atributos de las etiquetas de C_HEAD
  private int chField1 = 0;
  private int chField2 = 0;

  private void chFieldOne() {
    chField1++;
  }

  private void chFieldTwo() {
    chField2++;
  }

  private void chFieldReset() {
    chField1 = 0;
    chField2 = 0;
  }

  private void verifyCHFields() {
    if (chField1 == 1 && chField2 == 1) {
      System.out.println("Los campos de la etiqueta C_HEADER son correctos");
    }
    else if (chField1 == 0 && chField2 == 1) {
      System.out.println("Contenido del titulo de la etiqueta C_HEADER no encontrado");
    }
    else if (chField1 == 1 && chField2 == 0) {
      System.out.println("Parametro link de la etiqueta C_HEADER no encontrado");
    }
    else {
      System.out.println("Parametros id y name de la etiqueta C_HEADER no encontrados");
    }
  }

  //Metodo para contar el atributo de la etiqueta de C_BODY
  private int cbField1 = 0;

  private void cbFieldOne() {
    cbField1++;
  }

  private void cbFieldReset() {
    cbField1 = 0;
  }

  private void verifyCBFields() {
    if (cbField1 == 1) {
      System.out.println("El campo de la etiqueta C_BODY es correcto");
    }
    else {
      System.out.println("Parametro background de la etiqueta C_BODY no encontrado");
    }
  }



  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LessThan Html ATRIBINICIO GreaterThan HEADER BODY LessThan HtmlEnd GreaterThan 
            {
              Object RESULT =null;
		System.out.println("Documento correcto");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ATRIBINICIO ::= BracketOpen id Assign Quotes Text Quotes BracketClose ATRIBINICIO 
            {
              Object RESULT =null;
		 ccFieldOne(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBINICIO",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ATRIBINICIO ::= BracketOpen name Assign Quotes TEXT Quotes BracketClose ATRIBINICIO 
            {
              Object RESULT =null;
		 ccFieldTwo(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBINICIO",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ATRIBINICIO ::= error ATRIBINICIO 
            {
              Object RESULT =null;
		System.out.println("\t\tERROR EN LA PRODUCCION DE ATRIBUTOS DE INICIO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBINICIO",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ATRIBINICIO ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBINICIO",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // HEADER ::= LessThan Head GreaterThan CONTENTHEADER CONTENTHEADER LessThan HeadEnd GreaterThan 
            {
              Object RESULT =null;
		System.out.println("Se reconoció el cuerpo del header");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HEADER",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // HEADER ::= error 
            {
              Object RESULT =null;
		System.out.println("\t\tERROR EN LA PRODUCCION DE HEADER");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HEADER",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONTENTHEADER ::= LessThan Title GreaterThan TEXT LessThan TitleEnd GreaterThan 
            {
              Object RESULT =null;
		 chFieldOne();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTENTHEADER",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONTENTHEADER ::= LessThan Link LINKTEXT GreaterThan LessThan LinkEnd GreaterThan 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTENTHEADER",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONTENTHEADER ::= error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTENTHEADER",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LINKTEXT ::= BracketOpen href Assign Quotes LinkHtml Quotes BracketClose 
            {
              Object RESULT =null;
		 chFieldTwo();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINKTEXT",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LINKTEXT ::= error LINKTEXT 
            {
              Object RESULT =null;
		System.out.println("\t\tERROR EN LA PRODUCCION DE LINKTEXT");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINKTEXT",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LINKTEXT ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINKTEXT",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BODY ::= LessThan Body BODYTEXT GreaterThan LessThan BODYCONTENT BodyEnd GreaterThan 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODY",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BODY ::= error 
            {
              Object RESULT =null;
		System.out.println("\t\tERROR EN LA PRODUCCION DE BODY");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODY",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BODYTEXT ::= BracketOpen Background Assign Quotes COLOR Quotes BracketClose 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODYTEXT",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BODYTEXT ::= error BODYTEXT 
            {
              Object RESULT =null;
		System.out.println("\t\tERROR EN LA PRODUCCION DE BODYTEXT");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODYTEXT",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BODYTEXT ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODYTEXT",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BODYCONTENT ::= Span SPANPARAMETERS GreaterThan SPECIALTEXT LessThan SPANETIQUETAS SpanEnd GreaterThan LessThan BODYCONTENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODYCONTENT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BODYCONTENT ::= Input INPUTPARAMETERS GreaterThan LessThan BODYCONTENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODYCONTENT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BODYCONTENT ::= Textarea TEXTAREAPARAMETERS GreaterThan SPECIALTEXT LessThan TextareaEnd GreaterThan LessThan BODYCONTENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODYCONTENT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BODYCONTENT ::= Select SELECTPARAMETERS GreaterThan LessThan SELECTETIQUETAS SelectEnd GreaterThan LessThan BODYCONTENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODYCONTENT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BODYCONTENT ::= Option GreaterThan SPECIALTEXT LessThan OptionEnd GreaterThan LessThan BODYCONTENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODYCONTENT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BODYCONTENT ::= DivHtml DIVHTMLPARAMETERS GreaterThan LessThan BODYCONTENT DivHtmlEnd GreaterThan LessThan BODYCONTENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODYCONTENT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BODYCONTENT ::= Img IMGPARAMETERS GreaterThan LessThan BODYCONTENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODYCONTENT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BODYCONTENT ::= Br GreaterThan LessThan BODYCONTENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODYCONTENT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BODYCONTENT ::= Button BUTTONPARAMETERS GreaterThan SPECIALTEXT LessThan BUTTONETIQUETAS ButtonEnd GreaterThan LessThan BODYCONTENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODYCONTENT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // BODYCONTENT ::= h1 H1PPARAMETERS GreaterThan SPECIALTEXT LessThan SPANETIQUETAS h1End GreaterThan LessThan BODYCONTENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODYCONTENT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // BODYCONTENT ::= p H1PPARAMETERS GreaterThan SPECIALTEXT LessThan SPANETIQUETAS pEnd GreaterThan LessThan BODYCONTENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODYCONTENT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // BODYCONTENT ::= error BODYCONTENT 
            {
              Object RESULT =null;
		System.out.println("\t\tERROR EN LA PRODUCCION DE BODYCONTENT");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODYCONTENT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // BODYCONTENT ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODYCONTENT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SPANPARAMETERS ::= BracketOpen ColorSentence Assign Quotes COLOR Quotes BracketClose SPANPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SPANPARAMETERS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SPANPARAMETERS ::= BracketOpen FontSizeSentence Assign Quotes FontSize Quotes BracketClose SPANPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SPANPARAMETERS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SPANPARAMETERS ::= BracketOpen FontFamilySentence Assign Quotes FontFamily Quotes BracketClose SPANPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SPANPARAMETERS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SPANPARAMETERS ::= BracketOpen TextAlignSentence Assign Quotes TextAlign Quotes BracketClose SPANPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SPANPARAMETERS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SPANPARAMETERS ::= BracketOpen id Assign Quotes Text Quotes BracketClose SPANPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SPANPARAMETERS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SPANPARAMETERS ::= error SPANPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SPANPARAMETERS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SPANPARAMETERS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SPANPARAMETERS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INPUTPARAMETERS ::= BracketOpen TypeSentence Assign Quotes Type Quotes BracketClose INPUTPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INPUTPARAMETERS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INPUTPARAMETERS ::= BracketOpen FontSizeSentence Assign Quotes FontSize Quotes BracketClose INPUTPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INPUTPARAMETERS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INPUTPARAMETERS ::= BracketOpen FontFamilySentence Assign Quotes FontFamily Quotes BracketClose INPUTPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INPUTPARAMETERS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INPUTPARAMETERS ::= BracketOpen TextAlignSentence Assign Quotes TextAlign Quotes BracketClose INPUTPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INPUTPARAMETERS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INPUTPARAMETERS ::= BracketOpen id Assign Quotes Text Quotes BracketClose INPUTPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INPUTPARAMETERS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INPUTPARAMETERS ::= BracketOpen ColorSentence Assign Quotes COLOR Quotes BracketClose INPUTPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INPUTPARAMETERS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INPUTPARAMETERS ::= error INPUTPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INPUTPARAMETERS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INPUTPARAMETERS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INPUTPARAMETERS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TEXTAREAPARAMETERS ::= BracketOpen FontSizeSentence Assign Quotes FontSize Quotes BracketClose TEXTAREAPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TEXTAREAPARAMETERS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TEXTAREAPARAMETERS ::= BracketOpen FontFamilySentence Assign Quotes FontFamily Quotes BracketClose TEXTAREAPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TEXTAREAPARAMETERS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TEXTAREAPARAMETERS ::= BracketOpen TextAlignSentence Assign Quotes TextAlign Quotes BracketClose TEXTAREAPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TEXTAREAPARAMETERS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TEXTAREAPARAMETERS ::= BracketOpen id Assign Quotes Text Quotes BracketClose TEXTAREAPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TEXTAREAPARAMETERS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TEXTAREAPARAMETERS ::= BracketOpen ColsSentence Assign Quotes Number Quotes BracketClose TEXTAREAPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TEXTAREAPARAMETERS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TEXTAREAPARAMETERS ::= BracketOpen RowsSentence Assign Quotes Number Quotes BracketClose TEXTAREAPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TEXTAREAPARAMETERS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TEXTAREAPARAMETERS ::= error TEXTAREAPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TEXTAREAPARAMETERS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TEXTAREAPARAMETERS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TEXTAREAPARAMETERS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SELECTPARAMETERS ::= BracketOpen FontSizeSentence Assign Quotes FontSize Quotes BracketClose SELECTPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SELECTPARAMETERS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SELECTPARAMETERS ::= BracketOpen FontFamilySentence Assign Quotes FontFamily Quotes BracketClose SELECTPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SELECTPARAMETERS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SELECTPARAMETERS ::= BracketOpen TextAlignSentence Assign Quotes TextAlign Quotes BracketClose SELECTPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SELECTPARAMETERS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SELECTPARAMETERS ::= BracketOpen id Assign Quotes Text Quotes BracketClose SELECTPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SELECTPARAMETERS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SELECTPARAMETERS ::= BracketOpen ColorSentence Assign Quotes COLOR Quotes BracketClose SELECTPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SELECTPARAMETERS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SELECTPARAMETERS ::= error SELECTPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SELECTPARAMETERS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SELECTPARAMETERS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SELECTPARAMETERS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DIVHTMLPARAMETERS ::= BracketOpen FontSizeSentence Assign Quotes FontSize Quotes BracketClose DIVHTMLPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIVHTMLPARAMETERS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DIVHTMLPARAMETERS ::= BracketOpen FontFamilySentence Assign Quotes FontFamily Quotes BracketClose DIVHTMLPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIVHTMLPARAMETERS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DIVHTMLPARAMETERS ::= BracketOpen TextAlignSentence Assign Quotes TextAlign Quotes BracketClose DIVHTMLPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIVHTMLPARAMETERS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DIVHTMLPARAMETERS ::= BracketOpen id Assign Quotes Text Quotes BracketClose DIVHTMLPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIVHTMLPARAMETERS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DIVHTMLPARAMETERS ::= BracketOpen classSentence Assign Quotes CLASSOPTIONS Quotes BracketClose DIVHTMLPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIVHTMLPARAMETERS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DIVHTMLPARAMETERS ::= BracketOpen ColorSentence Assign Quotes COLOR Quotes BracketClose DIVHTMLPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIVHTMLPARAMETERS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DIVHTMLPARAMETERS ::= BracketOpen Background Assign Quotes COLOR Quotes BracketClose DIVHTMLPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIVHTMLPARAMETERS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DIVHTMLPARAMETERS ::= error DIVHTMLPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIVHTMLPARAMETERS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DIVHTMLPARAMETERS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIVHTMLPARAMETERS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // IMGPARAMETERS ::= BracketOpen src Assign Quotes LinkHtml Quotes BracketClose IMGPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMGPARAMETERS",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // IMGPARAMETERS ::= BracketOpen width Assign Quotes IMAGESIZES Quotes BracketClose IMGPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMGPARAMETERS",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // IMGPARAMETERS ::= BracketOpen height Assign Quotes IMAGESIZES Quotes BracketClose IMGPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMGPARAMETERS",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // IMGPARAMETERS ::= BracketOpen altSentence Assign Quotes TEXT Quotes BracketClose IMGPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMGPARAMETERS",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IMGPARAMETERS ::= BracketOpen id Assign Quotes Text Quotes BracketClose IMGPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMGPARAMETERS",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // IMGPARAMETERS ::= error IMGPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMGPARAMETERS",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // IMGPARAMETERS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMGPARAMETERS",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // BUTTONPARAMETERS ::= BracketOpen FontSizeSentence Assign Quotes FontSize Quotes BracketClose BUTTONPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BUTTONPARAMETERS",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // BUTTONPARAMETERS ::= BracketOpen FontFamilySentence Assign Quotes FontFamily Quotes BracketClose BUTTONPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BUTTONPARAMETERS",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // BUTTONPARAMETERS ::= BracketOpen TextAlignSentence Assign Quotes TextAlign Quotes BracketClose BUTTONPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BUTTONPARAMETERS",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // BUTTONPARAMETERS ::= BracketOpen id Assign Quotes Text Quotes BracketClose BUTTONPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BUTTONPARAMETERS",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // BUTTONPARAMETERS ::= BracketOpen ColorSentence Assign Quotes COLOR Quotes BracketClose BUTTONPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BUTTONPARAMETERS",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // BUTTONPARAMETERS ::= BracketOpen Background Assign Quotes COLOR Quotes BracketClose BUTTONPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BUTTONPARAMETERS",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // BUTTONPARAMETERS ::= BracketOpen onclickSentence Assign Quotes FunctionName Quotes BracketClose BUTTONPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BUTTONPARAMETERS",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // BUTTONPARAMETERS ::= error BUTTONPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BUTTONPARAMETERS",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // BUTTONPARAMETERS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BUTTONPARAMETERS",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // H1PPARAMETERS ::= BracketOpen FontSizeSentence Assign Quotes FontSize Quotes BracketClose H1PPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("H1PPARAMETERS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // H1PPARAMETERS ::= BracketOpen FontFamilySentence Assign Quotes FontFamily Quotes BracketClose H1PPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("H1PPARAMETERS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // H1PPARAMETERS ::= BracketOpen TextAlignSentence Assign Quotes TextAlign Quotes BracketClose H1PPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("H1PPARAMETERS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // H1PPARAMETERS ::= BracketOpen id Assign Quotes Text Quotes BracketClose H1PPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("H1PPARAMETERS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // H1PPARAMETERS ::= BracketOpen ColorSentence Assign Quotes COLOR Quotes BracketClose H1PPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("H1PPARAMETERS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // H1PPARAMETERS ::= error H1PPARAMETERS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("H1PPARAMETERS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // H1PPARAMETERS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("H1PPARAMETERS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SELECTETIQUETAS ::= Option GreaterThan SPECIALTEXT LessThan OptionEnd GreaterThan LessThan SELECTETIQUETAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SELECTETIQUETAS",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SELECTETIQUETAS ::= error SELECTETIQUETAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SELECTETIQUETAS",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SELECTETIQUETAS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SELECTETIQUETAS",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // BUTTONETIQUETAS ::= Img IMGPARAMETERS GreaterThan SPECIALTEXT LessThan BUTTONETIQUETAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BUTTONETIQUETAS",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // BUTTONETIQUETAS ::= Span SPANPARAMETERS GreaterThan SPECIALTEXT LessThan SpanEnd GreaterThan SPECIALTEXT LessThan BUTTONETIQUETAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BUTTONETIQUETAS",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // BUTTONETIQUETAS ::= Br GreaterThan SPECIALTEXT LessThan BUTTONETIQUETAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BUTTONETIQUETAS",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // BUTTONETIQUETAS ::= error BUTTONETIQUETAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BUTTONETIQUETAS",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // BUTTONETIQUETAS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BUTTONETIQUETAS",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SPANETIQUETAS ::= Br GreaterThan SPECIALTEXT LessThan SPANETIQUETAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SPANETIQUETAS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SPANETIQUETAS ::= error SPANETIQUETAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SPANETIQUETAS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SPANETIQUETAS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SPANETIQUETAS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // COLOR ::= Hexadecimal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COLOR",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // COLOR ::= Color 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COLOR",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // COLOR ::= error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COLOR",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // IMAGESIZES ::= FontSize 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMAGESIZES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // IMAGESIZES ::= ImageSize 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMAGESIZES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // IMAGESIZES ::= error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMAGESIZES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // TEXT ::= Text TEXT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TEXT",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // TEXT ::= Number TEXT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TEXT",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // TEXT ::= Number 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TEXT",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // TEXT ::= Text 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TEXT",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SIGNS ::= Assign 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIGNS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SIGNS ::= Plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIGNS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SIGNS ::= Minus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIGNS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SIGNS ::= Div 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIGNS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SIGNS ::= Mult 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIGNS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SIGNS ::= ParOpen 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIGNS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SIGNS ::= ParClose 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIGNS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SIGNS ::= Quotes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIGNS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SIGNS ::= BracketOpen 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIGNS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SIGNS ::= BracketClose 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIGNS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CLASSOPTIONS ::= Column 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CLASSOPTIONS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CLASSOPTIONS ::= Row 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CLASSOPTIONS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CLASSOPTIONS ::= error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CLASSOPTIONS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // SPECIALTEXT ::= Text SPECIALTEXT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SPECIALTEXT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // SPECIALTEXT ::= Number SPECIALTEXT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SPECIALTEXT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // SPECIALTEXT ::= SIGNS SPECIALTEXT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SPECIALTEXT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // SPECIALTEXT ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SPECIALTEXT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
