// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: lexer.flex

/*------------  1ra Area: Codigo de Usuario ---------*/
//------> Paquetes,importaciones
package analyzers;
import java_cup.runtime.*;

/*------------  2da Area: Opciones y Declaraciones ---------*/

@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  1,  4,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  5,  6,  7,  8,  9, 10,  0, 11, 12, 13, 14,  8, 15,  8, 16, 
    17, 18, 17, 17, 17, 17, 17, 17, 17, 17, 19,  8, 20, 21, 22,  8, 
     0, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 
    38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,  0, 50,  0, 51, 
     0, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 
    38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,  0, 52,  0,  0,  0, 
     0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8, 
     0,  8,  0,  0,  0,  0,  0,  0,  0,  8,  0,  0,  0,  8,  0,  0, 
     0,  8,  0,  8,  0,  0,  0,  0,  0,  0,  8,  0,  0,  0,  0,  0, 
     0,  8,  0,  0,  0,  0,  0,  0,  0,  8,  0,  0,  0,  8,  0,  0, 
     0,  8,  0,  8,  0,  0,  0,  0,  0,  0,  8,  0,  0,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\3\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\23\5\1\20\1\21\1\1\1\22\1\0\1\23\1\5"+
    "\1\24\1\0\1\25\1\5\1\0\1\26\1\27\1\30"+
    "\21\5\1\31\26\5\1\32\2\22\1\33\1\5\1\0"+
    "\1\34\1\0\1\35\21\5\1\36\25\5\1\37\1\5"+
    "\1\40\2\5\1\41\10\5\6\0\1\42\3\0\1\43"+
    "\3\5\1\44\4\5\1\45\3\5\1\46\1\5\1\47"+
    "\1\5\1\50\14\5\1\51\2\5\1\52\2\5\1\53"+
    "\1\54\1\5\1\55\1\56\6\5\1\57\2\5\1\60"+
    "\1\61\1\62\5\5\2\0\1\63\1\0\1\64\10\0"+
    "\1\65\1\5\1\66\2\5\1\67\1\70\4\5\1\71"+
    "\1\5\1\72\12\5\1\73\6\5\1\74\2\5\1\75"+
    "\1\76\4\5\1\77\1\100\2\5\2\0\1\101\10\0"+
    "\1\5\1\102\1\5\1\103\1\5\1\104\1\5\1\105"+
    "\1\5\1\106\2\5\1\107\5\5\1\110\1\111\1\0"+
    "\1\5\1\112\1\113\1\5\1\114\1\5\1\115\2\5"+
    "\1\116\1\117\1\120\1\0\1\121\1\122\2\0\1\123"+
    "\2\0\1\124\2\5\1\125\1\5\1\126\3\5\1\127"+
    "\2\5\1\130\1\0\1\131\1\132\2\5\1\133\4\0"+
    "\1\134\1\5\1\135\1\136\1\137\1\140\3\5\1\141"+
    "\2\5\1\142\1\143\1\144\1\0\3\5\1\145\2\5"+
    "\1\0\1\146\1\147\1\5\1\150\1\151\1\152\1\153";

  private static int [] zzUnpackAction() {
    int [] result = new int[385];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\65\0\152\0\237\0\65\0\324\0\u0109"+
    "\0\u013e\0\65\0\65\0\65\0\65\0\u0109\0\u0173\0\u01a8"+
    "\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b\0\u0350"+
    "\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3\0\u04f8"+
    "\0\u052d\0\u0562\0\u0597\0\u05cc\0\u0601\0\u0636\0\65\0\65"+
    "\0\u066b\0\u06a0\0\u06d5\0\65\0\u070a\0\u0109\0\u073f\0\u0109"+
    "\0\u0774\0\u07a9\0\65\0\65\0\65\0\u07de\0\u0813\0\u0848"+
    "\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0"+
    "\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0109\0\u0b63"+
    "\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b"+
    "\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3"+
    "\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\65\0\65\0\u0ff1"+
    "\0\65\0\u1026\0\u105b\0\u0109\0\u1090\0\u0109\0\u10c5\0\u10fa"+
    "\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2"+
    "\0\u12d7\0\u130c\0\u1341\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u0109"+
    "\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd"+
    "\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb\0\u1730\0\u1765"+
    "\0\u179a\0\u17cf\0\u1804\0\u1839\0\u186e\0\u0109\0\u18a3\0\u18d8"+
    "\0\u190d\0\u1942\0\u0109\0\u1977\0\u19ac\0\u19e1\0\u1a16\0\u1a4b"+
    "\0\u1a80\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe\0\u1bf3"+
    "\0\u1c28\0\65\0\u1c5d\0\u1c92\0\u1cc7\0\u0109\0\u1cfc\0\u1d31"+
    "\0\u1d66\0\u0109\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a\0\u0109\0\u1e6f"+
    "\0\u1ea4\0\u1ed9\0\u0109\0\u1f0e\0\u0109\0\u1f43\0\u0109\0\u1f78"+
    "\0\u1fad\0\u1fe2\0\u2017\0\u204c\0\u2081\0\u20b6\0\u20eb\0\u2120"+
    "\0\u2155\0\u218a\0\u21bf\0\u0109\0\u21f4\0\u2229\0\u0109\0\u225e"+
    "\0\u2293\0\u0109\0\u0109\0\u22c8\0\u0109\0\u0109\0\u22fd\0\u2332"+
    "\0\u2367\0\u239c\0\u23d1\0\u2406\0\u0109\0\u243b\0\u2470\0\u0109"+
    "\0\u24a5\0\u0109\0\u24da\0\u250f\0\u2544\0\u2579\0\u25ae\0\u25e3"+
    "\0\u2618\0\65\0\u264d\0\65\0\u2682\0\u26b7\0\u26ec\0\u2721"+
    "\0\u2756\0\u278b\0\u27c0\0\u27f5\0\u0109\0\u282a\0\u0109\0\u285f"+
    "\0\u2894\0\u0109\0\u0109\0\u28c9\0\u28fe\0\u2933\0\u2968\0\u0109"+
    "\0\u299d\0\u0109\0\u29d2\0\u2a07\0\u2a3c\0\u2a71\0\u2aa6\0\u2adb"+
    "\0\u2b10\0\u2b45\0\u2b7a\0\u2baf\0\u0109\0\u2be4\0\u2c19\0\u2c4e"+
    "\0\u2c83\0\u2cb8\0\u2ced\0\u0109\0\u2d22\0\u2d57\0\u0109\0\u0109"+
    "\0\u2d8c\0\u2dc1\0\u2df6\0\u2e2b\0\u0109\0\u0109\0\u2e60\0\u2e95"+
    "\0\u2eca\0\u2eff\0\65\0\u2f34\0\u2f69\0\u2f9e\0\u2fd3\0\u3008"+
    "\0\u303d\0\u3072\0\u30a7\0\u30dc\0\u0109\0\u3111\0\u0109\0\u3146"+
    "\0\u0109\0\u317b\0\u0109\0\u31b0\0\u0109\0\u31e5\0\u321a\0\u0109"+
    "\0\u324f\0\u3284\0\u32b9\0\u32ee\0\u3323\0\u0109\0\u0109\0\u3358"+
    "\0\u338d\0\u0109\0\u0109\0\u33c2\0\u0109\0\u33f7\0\u0109\0\u342c"+
    "\0\u3461\0\u0109\0\u0109\0\65\0\u3496\0\65\0\65\0\u34cb"+
    "\0\u3500\0\65\0\u3535\0\u356a\0\65\0\u359f\0\u35d4\0\u0109"+
    "\0\u3609\0\u0109\0\u363e\0\u3673\0\u36a8\0\u0109\0\u36dd\0\u3712"+
    "\0\u0109\0\u3747\0\u0109\0\u0109\0\u377c\0\u37b1\0\u0109\0\u37e6"+
    "\0\u381b\0\u3850\0\u3885\0\65\0\u38ba\0\u0109\0\u0109\0\u0109"+
    "\0\u0109\0\u38ef\0\u3924\0\u3959\0\u3747\0\u398e\0\u39c3\0\65"+
    "\0\65\0\65\0\u39f8\0\u3a2d\0\u3a62\0\u3a97\0\u0109\0\u3acc"+
    "\0\u3b01\0\u3b36\0\u0109\0\u0109\0\u3b6b\0\u0109\0\u0109\0\65"+
    "\0\u0109";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[385];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\2\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\2\20"+
    "\1\10\1\21\1\22\1\23\1\24\1\25\1\26\2\10"+
    "\1\27\1\30\1\31\1\32\1\33\1\10\1\34\1\35"+
    "\1\36\1\37\1\40\1\10\1\41\1\42\1\43\1\10"+
    "\1\44\1\45\1\10\1\46\1\10\1\47\1\50\1\10"+
    "\1\51\67\0\1\3\67\0\1\52\1\0\4\10\1\53"+
    "\3\0\1\10\1\0\3\10\1\0\1\54\1\0\32\10"+
    "\2\0\1\10\6\0\1\10\1\0\4\10\1\53\3\0"+
    "\1\10\1\0\2\55\1\10\3\0\32\55\2\0\1\10"+
    "\6\0\1\10\1\0\4\10\1\53\3\0\1\10\1\0"+
    "\3\10\3\0\32\10\2\0\1\10\6\0\1\10\1\0"+
    "\3\10\1\56\1\53\3\0\1\10\1\0\3\10\3\0"+
    "\32\10\2\0\1\10\32\0\1\57\40\0\1\10\1\0"+
    "\2\10\1\60\1\10\1\53\3\0\1\10\1\0\2\20"+
    "\1\10\3\0\17\10\1\61\12\10\2\0\1\10\6\0"+
    "\1\62\17\0\1\63\64\0\1\64\64\0\1\65\44\0"+
    "\1\10\1\0\4\10\1\53\3\0\1\10\1\0\3\10"+
    "\3\0\13\10\1\66\4\10\1\67\1\70\10\10\2\0"+
    "\1\10\6\0\1\10\1\0\4\10\1\53\3\0\1\10"+
    "\1\0\3\10\3\0\1\71\12\10\1\72\16\10\2\0"+
    "\1\10\6\0\1\10\1\0\4\10\1\53\3\0\1\10"+
    "\1\0\3\10\3\0\4\10\1\73\2\10\1\74\3\10"+
    "\1\75\2\10\1\76\13\10\2\0\1\77\6\0\1\10"+
    "\1\0\4\10\1\53\3\0\1\10\1\0\3\10\3\0"+
    "\16\10\1\100\5\10\1\101\5\10\2\0\1\10\6\0"+
    "\1\10\1\0\4\10\1\53\3\0\1\10\1\0\3\10"+
    "\3\0\4\10\1\102\14\10\1\103\10\10\2\0\1\10"+
    "\6\0\1\10\1\0\4\10\1\53\3\0\1\10\1\0"+
    "\3\10\3\0\4\10\1\104\14\10\1\105\1\10\1\106"+
    "\6\10\2\0\1\10\6\0\1\10\1\0\4\10\1\53"+
    "\3\0\1\10\1\0\3\10\3\0\3\10\1\107\26\10"+
    "\2\0\1\10\6\0\1\10\1\0\4\10\1\53\3\0"+
    "\1\10\1\0\3\10\3\0\24\10\1\110\5\10\2\0"+
    "\1\10\6\0\1\10\1\0\4\10\1\53\3\0\1\10"+
    "\1\0\3\10\3\0\4\10\1\111\3\10\1\112\21\10"+
    "\2\0\1\10\6\0\1\10\1\0\4\10\1\53\3\0"+
    "\1\10\1\0\3\10\3\0\1\113\31\10\2\0\1\10"+
    "\6\0\1\10\1\0\4\10\1\53\3\0\1\10\1\0"+
    "\3\10\3\0\1\114\23\10\1\115\5\10\2\0\1\10"+
    "\6\0\1\10\1\0\4\10\1\53\3\0\1\10\1\0"+
    "\3\10\3\0\13\10\1\116\1\10\1\117\14\10\2\0"+
    "\1\10\6\0\1\10\1\0\4\10\1\53\3\0\1\10"+
    "\1\0\3\10\3\0\24\10\1\120\5\10\2\0\1\10"+
    "\6\0\1\10\1\0\4\10\1\53\3\0\1\10\1\0"+
    "\3\10\3\0\1\121\3\10\1\122\3\10\1\123\5\10"+
    "\1\124\13\10\2\0\1\10\6\0\1\10\1\0\4\10"+
    "\1\53\3\0\1\10\1\0\3\10\3\0\1\125\7\10"+
    "\1\126\10\10\1\127\10\10\2\0\1\10\6\0\1\10"+
    "\1\0\4\10\1\53\3\0\1\10\1\0\3\10\3\0"+
    "\4\10\1\130\23\10\1\131\1\10\2\0\1\10\6\0"+
    "\1\10\1\0\4\10\1\53\3\0\1\10\1\0\3\10"+
    "\3\0\4\10\1\132\25\10\2\0\1\10\6\0\1\10"+
    "\1\0\4\10\1\53\3\0\1\10\1\0\3\10\3\0"+
    "\7\10\1\133\1\134\21\10\2\0\1\10\6\0\1\10"+
    "\1\0\4\10\1\53\3\0\1\10\1\0\3\10\3\0"+
    "\4\10\1\135\25\10\2\0\1\10\65\0\1\136\2\52"+
    "\1\137\1\52\1\140\60\52\14\0\1\141\55\0\1\10"+
    "\1\0\4\10\1\53\3\0\1\10\1\0\2\142\1\10"+
    "\3\0\32\142\2\0\1\10\64\0\1\143\6\0\1\10"+
    "\1\0\4\10\1\53\3\0\1\10\1\0\3\10\3\0"+
    "\27\10\1\144\2\10\2\0\1\10\20\0\1\145\52\0"+
    "\1\10\1\0\4\10\1\53\3\0\1\10\1\0\3\10"+
    "\3\0\23\10\1\146\6\10\2\0\1\10\6\0\1\10"+
    "\1\0\4\10\1\53\3\0\1\10\1\0\3\10\3\0"+
    "\24\10\1\147\5\10\2\0\1\10\6\0\1\10\1\0"+
    "\4\10\1\53\3\0\1\10\1\0\3\10\3\0\10\10"+
    "\1\150\21\10\2\0\1\10\6\0\1\10\1\0\4\10"+
    "\1\53\3\0\1\10\1\0\3\10\3\0\2\10\1\151"+
    "\27\10\2\0\1\10\6\0\1\10\1\0\4\10\1\53"+
    "\3\0\1\10\1\0\3\10\3\0\1\152\23\10\1\153"+
    "\5\10\2\0\1\10\6\0\1\10\1\0\4\10\1\53"+
    "\3\0\1\10\1\0\3\10\3\0\15\10\1\154\14\10"+
    "\2\0\1\10\6\0\1\10\1\0\4\10\1\53\3\0"+
    "\1\10\1\0\3\10\3\0\4\10\1\155\25\10\2\0"+
    "\1\10\6\0\1\10\1\0\4\10\1\53\3\0\1\10"+
    "\1\0\3\10\3\0\1\156\31\10\2\0\1\10\6\0"+
    "\1\10\1\0\4\10\1\53\3\0\1\10\1\0\3\10"+
    "\3\0\13\10\1\157\10\10\1\160\5\10\2\0\1\10"+
    "\6\0\1\10\1\0\4\10\1\53\3\0\1\10\1\0"+
    "\3\10\3\0\1\10\1\161\1\162\1\163\3\10\1\164"+
    "\1\165\2\10\1\166\2\10\1\167\1\170\2\10\1\171"+
    "\1\172\6\10\2\0\1\10\6\0\1\10\1\0\4\10"+
    "\1\53\3\0\1\10\1\0\3\10\3\0\15\10\1\173"+
    "\14\10\2\0\1\10\6\0\1\10\1\0\4\10\1\53"+
    "\3\0\1\10\1\0\3\10\3\0\2\10\1\174\27\10"+
    "\2\0\1\10\6\0\1\10\1\0\4\10\1\53\3\0"+
    "\1\10\1\0\3\10\3\0\15\10\1\175\14\10\2\0"+
    "\1\10\6\0\1\10\1\0\4\10\1\53\3\0\1\10"+
    "\1\0\3\10\3\0\1\176\3\10\1\177\25\10\2\0"+
    "\1\10\6\0\1\10\1\0\4\10\1\53\3\0\1\10"+
    "\1\0\3\10\3\0\10\10\1\200\21\10\2\0\1\10"+
    "\6\0\1\10\1\0\4\10\1\53\3\0\1\10\1\0"+
    "\3\10\3\0\4\10\1\201\25\10\2\0\1\10\6\0"+
    "\1\10\1\0\4\10\1\53\3\0\1\10\1\0\3\10"+
    "\3\0\23\10\1\202\6\10\2\0\1\10\6\0\1\10"+
    "\1\0\4\10\1\53\3\0\1\10\1\0\3\10\3\0"+
    "\22\10\1\203\7\10\2\0\1\10\6\0\1\10\1\0"+
    "\4\10\1\53\3\0\1\10\1\0\3\10\3\0\5\10"+
    "\1\204\24\10\2\0\1\10\6\0\1\10\1\0\4\10"+
    "\1\53\3\0\1\10\1\0\3\10\3\0\14\10\1\205"+
    "\15\10\2\0\1\10\6\0\1\10\1\0\4\10\1\53"+
    "\3\0\1\10\1\0\3\10\3\0\21\10\1\206\10\10"+
    "\2\0\1\10\6\0\1\10\1\0\4\10\1\53\3\0"+
    "\1\10\1\0\3\10\3\0\14\10\1\207\10\10\1\210"+
    "\4\10\2\0\1\10\6\0\1\10\1\0\4\10\1\53"+
    "\3\0\1\10\1\0\3\10\3\0\14\10\1\211\15\10"+
    "\2\0\1\10\6\0\1\10\1\0\4\10\1\53\3\0"+
    "\1\10\1\0\3\10\3\0\10\10\1\212\21\10\2\0"+
    "\1\10\6\0\1\10\1\0\4\10\1\53\3\0\1\10"+
    "\1\0\3\10\3\0\2\10\1\213\27\10\2\0\1\10"+
    "\6\0\1\10\1\0\4\10\1\53\3\0\1\10\1\0"+
    "\3\10\3\0\21\10\1\214\10\10\2\0\1\10\6\0"+
    "\1\10\1\0\4\10\1\53\3\0\1\10\1\0\3\10"+
    "\3\0\3\10\1\215\26\10\2\0\1\10\6\0\1\10"+
    "\1\0\4\10\1\53\3\0\1\10\1\0\3\10\3\0"+
    "\3\10\1\216\26\10\2\0\1\10\6\0\1\10\1\0"+
    "\4\10\1\53\3\0\1\10\1\0\3\10\3\0\6\10"+
    "\1\217\23\10\2\0\1\10\6\0\1\10\1\0\4\10"+
    "\1\53\3\0\1\10\1\0\3\10\3\0\26\10\1\220"+
    "\3\10\2\0\1\10\6\0\1\10\1\0\4\10\1\53"+
    "\3\0\1\10\1\0\3\10\3\0\15\10\1\221\14\10"+
    "\2\0\1\10\6\0\1\10\1\0\4\10\1\53\3\0"+
    "\1\10\1\0\3\10\3\0\13\10\1\222\16\10\2\0"+
    "\1\10\6\0\1\10\1\0\4\10\1\53\3\0\1\10"+
    "\1\0\3\10\3\0\2\10\1\223\27\10\2\0\1\10"+
    "\6\0\1\10\1\0\4\10\1\53\3\0\1\10\1\0"+
    "\3\10\3\0\1\224\26\10\1\225\2\10\2\0\1\10"+
    "\6\0\1\10\1\0\4\10\1\53\3\0\1\10\1\0"+
    "\3\10\3\0\17\10\1\226\12\10\2\0\1\10\6\0"+
    "\1\10\1\0\4\10\1\53\3\0\1\10\1\0\3\10"+
    "\3\0\21\10\1\227\10\10\2\0\1\10\6\0\1\10"+
    "\1\0\4\10\1\53\3\0\1\10\1\0\3\10\3\0"+
    "\10\10\1\230\21\10\2\0\1\10\6\0\1\10\1\0"+
    "\4\10\1\53\3\0\1\10\1\0\3\10\3\0\3\10"+
    "\1\231\26\10\2\0\1\10\6\0\1\10\1\0\4\10"+
    "\1\53\3\0\1\10\1\0\3\10\3\0\13\10\1\232"+
    "\16\10\2\0\1\10\3\0\1\137\67\0\1\10\1\0"+
    "\4\10\1\53\3\0\1\10\1\0\2\233\1\10\3\0"+
    "\32\233\2\0\1\10\31\0\1\234\1\235\1\236\3\0"+
    "\1\237\3\0\1\240\2\0\1\241\1\242\2\0\1\243"+
    "\1\244\31\0\1\245\52\0\1\10\1\0\4\10\1\53"+
    "\3\0\1\10\1\0\3\10\3\0\1\246\31\10\2\0"+
    "\1\10\6\0\1\10\1\0\4\10\1\53\3\0\1\10"+
    "\1\0\3\10\3\0\1\247\31\10\2\0\1\10\6\0"+
    "\1\10\1\0\4\10\1\53\3\0\1\10\1\0\3\10"+
    "\3\0\12\10\1\250\17\10\2\0\1\10\6\0\1\10"+
    "\1\0\4\10\1\53\3\0\1\10\1\0\3\10\3\0"+
    "\2\10\1\251\27\10\2\0\1\10\6\0\1\10\1\0"+
    "\4\10\1\53\3\0\1\10\1\0\3\10\3\0\4\10"+
    "\1\252\25\10\2\0\1\10\6\0\1\10\1\0\4\10"+
    "\1\53\3\0\1\10\1\0\3\10\3\0\23\10\1\253"+
    "\6\10\2\0\1\10\6\0\1\10\1\0\4\10\1\53"+
    "\3\0\1\10\1\0\3\10\3\0\2\10\1\254\27\10"+
    "\2\0\1\10\6\0\1\10\1\0\4\10\1\53\3\0"+
    "\1\10\1\0\3\10\3\0\22\10\1\255\7\10\2\0"+
    "\1\10\6\0\1\10\1\0\4\10\1\53\3\0\1\10"+
    "\1\0\3\10\3\0\16\10\1\256\3\10\1\257\1\10"+
    "\1\260\5\10\2\0\1\10\6\0\1\10\1\0\4\10"+
    "\1\53\3\0\1\10\1\0\3\10\3\0\21\10\1\261"+
    "\10\10\2\0\1\10\6\0\1\10\1\0\4\10\1\53"+
    "\3\0\1\10\1\0\3\10\3\0\16\10\1\262\2\10"+
    "\1\263\2\10\1\264\5\10\2\0\1\10\6\0\1\10"+
    "\1\0\4\10\1\53\3\0\1\10\1\0\3\10\3\0"+
    "\2\10\1\265\27\10\2\0\1\10\6\0\1\10\1\0"+
    "\4\10\1\53\3\0\1\10\1\0\3\10\3\0\10\10"+
    "\1\266\21\10\2\0\1\10\6\0\1\10\1\0\4\10"+
    "\1\53\3\0\1\10\1\0\1\10\1\267\1\10\3\0"+
    "\4\10\1\270\25\10\2\0\1\10\6\0\1\10\1\0"+
    "\4\10\1\53\3\0\1\10\1\0\3\10\3\0\14\10"+
    "\1\271\1\272\14\10\2\0\1\10\6\0\1\10\1\0"+
    "\4\10\1\53\3\0\1\10\1\0\3\10\3\0\10\10"+
    "\1\273\21\10\2\0\1\10\6\0\1\10\1\0\4\10"+
    "\1\53\3\0\1\10\1\0\3\10\3\0\17\10\1\274"+
    "\12\10\2\0\1\10\6\0\1\10\1\0\4\10\1\53"+
    "\3\0\1\10\1\0\3\10\3\0\4\10\1\275\12\10"+
    "\1\276\12\10\2\0\1\10\6\0\1\10\1\0\4\10"+
    "\1\53\3\0\1\10\1\0\3\10\3\0\4\10\1\277"+
    "\3\10\1\300\21\10\2\0\1\10\6\0\1\10\1\0"+
    "\4\10\1\53\3\0\1\10\1\0\3\10\3\0\23\10"+
    "\1\301\6\10\2\0\1\10\6\0\1\10\1\0\4\10"+
    "\1\53\3\0\1\10\1\0\3\10\3\0\7\10\1\302"+
    "\22\10\2\0\1\10\6\0\1\10\1\0\4\10\1\53"+
    "\3\0\1\10\1\0\3\10\3\0\4\10\1\303\25\10"+
    "\2\0\1\10\6\0\1\10\1\0\4\10\1\53\3\0"+
    "\1\10\1\0\3\10\3\0\30\10\1\304\1\10\2\0"+
    "\1\10\6\0\1\10\1\0\4\10\1\53\3\0\1\10"+
    "\1\0\3\10\3\0\4\10\1\305\25\10\2\0\1\10"+
    "\6\0\1\10\1\0\4\10\1\53\3\0\1\10\1\0"+
    "\3\10\3\0\6\10\1\306\23\10\2\0\1\10\6\0"+
    "\1\10\1\0\4\10\1\53\3\0\1\10\1\0\3\10"+
    "\3\0\5\10\1\307\24\10\2\0\1\10\6\0\1\10"+
    "\1\0\4\10\1\53\3\0\1\10\1\0\3\10\3\0"+
    "\17\10\1\310\12\10\2\0\1\10\6\0\1\10\1\0"+
    "\4\10\1\53\3\0\1\10\1\0\3\10\3\0\23\10"+
    "\1\311\6\10\2\0\1\10\6\0\1\10\1\0\4\10"+
    "\1\53\3\0\1\10\1\0\3\10\3\0\23\10\1\312"+
    "\6\10\2\0\1\10\6\0\1\10\1\0\4\10\1\53"+
    "\3\0\1\10\1\0\3\10\3\0\4\10\1\313\25\10"+
    "\2\0\1\10\6\0\1\10\1\0\4\10\1\53\3\0"+
    "\1\10\1\0\3\10\3\0\16\10\1\314\13\10\2\0"+
    "\1\10\6\0\1\10\1\0\4\10\1\53\3\0\1\10"+
    "\1\0\3\10\3\0\4\10\1\315\25\10\2\0\1\10"+
    "\6\0\1\10\1\0\4\10\1\53\3\0\1\10\1\0"+
    "\3\10\3\0\30\10\1\316\1\10\2\0\1\10\6\0"+
    "\1\10\1\0\4\10\1\53\3\0\1\10\1\0\3\10"+
    "\3\0\1\10\1\317\30\10\2\0\1\10\6\0\1\10"+
    "\1\0\4\10\1\53\3\0\1\10\1\0\3\10\3\0"+
    "\25\10\1\320\4\10\2\0\1\10\6\0\1\10\1\0"+
    "\4\10\1\53\3\0\1\10\1\0\3\10\3\0\13\10"+
    "\1\321\16\10\2\0\1\10\6\0\1\10\1\0\4\10"+
    "\1\53\3\0\1\10\1\0\3\10\3\0\17\10\1\322"+
    "\12\10\2\0\1\10\6\0\1\10\1\0\4\10\1\53"+
    "\3\0\1\10\1\0\3\10\3\0\10\10\1\323\21\10"+
    "\2\0\1\10\6\0\1\10\1\0\4\10\1\53\3\0"+
    "\1\10\1\0\3\10\3\0\7\10\1\324\22\10\2\0"+
    "\1\10\6\0\1\10\1\0\4\10\1\53\3\0\1\10"+
    "\1\0\3\10\3\0\22\10\1\325\7\10\2\0\1\10"+
    "\6\0\1\10\1\0\4\10\1\53\3\0\1\10\1\0"+
    "\3\10\3\0\22\10\1\326\7\10\2\0\1\10\6\0"+
    "\1\10\1\0\4\10\1\53\3\0\1\10\1\0\3\10"+
    "\3\0\25\10\1\327\4\10\2\0\1\10\6\0\1\10"+
    "\1\0\4\10\1\53\3\0\1\10\1\0\3\10\3\0"+
    "\13\10\1\330\16\10\2\0\1\10\6\0\1\10\1\0"+
    "\4\10\1\53\3\0\1\10\1\0\3\10\3\0\23\10"+
    "\1\331\6\10\2\0\1\10\6\0\1\10\1\0\4\10"+
    "\1\53\3\0\1\10\1\0\3\10\3\0\4\10\1\332"+
    "\25\10\2\0\1\10\6\0\1\10\1\0\4\10\1\53"+
    "\3\0\1\10\1\0\3\10\3\0\3\10\1\333\26\10"+
    "\2\0\1\10\6\0\1\10\1\0\4\10\1\53\3\0"+
    "\1\10\1\0\3\10\3\0\23\10\1\334\6\10\2\0"+
    "\1\10\6\0\1\10\1\0\4\10\1\53\3\0\1\10"+
    "\1\0\3\10\3\0\23\10\1\335\6\10\2\0\1\10"+
    "\6\0\1\10\1\0\4\10\1\53\3\0\1\10\1\0"+
    "\3\10\3\0\13\10\1\336\16\10\2\0\1\10\6\0"+
    "\1\10\1\0\4\10\1\53\3\0\1\10\1\0\2\337"+
    "\1\10\3\0\32\337\2\0\1\10\46\0\1\340\5\0"+
    "\1\341\42\0\1\342\72\0\1\343\47\0\1\344\10\0"+
    "\1\345\70\0\1\346\73\0\1\347\51\0\1\350\12\0"+
    "\1\351\51\0\1\352\3\0\1\353\25\0\17\245\1\354"+
    "\45\245\5\0\1\10\1\0\4\10\1\53\3\0\1\10"+
    "\1\0\3\10\3\0\13\10\1\355\16\10\2\0\1\10"+
    "\6\0\1\10\1\0\4\10\1\53\3\0\1\10\1\0"+
    "\3\10\3\0\6\10\1\356\23\10\2\0\1\10\6\0"+
    "\1\10\1\0\4\10\1\53\3\0\1\10\1\0\3\10"+
    "\3\0\12\10\1\357\17\10\2\0\1\10\6\0\1\10"+
    "\1\0\4\10\1\53\3\0\1\10\1\0\3\10\3\0"+
    "\4\10\1\360\25\10\2\0\1\10\6\0\1\10\1\0"+
    "\4\10\1\53\3\0\1\10\1\0\3\10\3\0\12\10"+
    "\1\361\17\10\2\0\1\10\6\0\1\10\1\0\4\10"+
    "\1\53\3\0\1\10\1\0\3\10\3\0\22\10\1\362"+
    "\7\10\2\0\1\10\6\0\1\10\1\0\4\10\1\53"+
    "\3\0\1\10\1\0\3\10\3\0\21\10\1\363\10\10"+
    "\2\0\1\10\6\0\1\10\1\0\4\10\1\53\3\0"+
    "\1\10\1\0\3\10\3\0\14\10\1\364\15\10\2\0"+
    "\1\10\6\0\1\10\1\0\4\10\1\53\3\0\1\10"+
    "\1\0\3\10\3\0\10\10\1\365\21\10\2\0\1\10"+
    "\6\0\1\10\1\0\4\10\1\53\3\0\1\10\1\0"+
    "\3\10\3\0\3\10\1\366\26\10\2\0\1\10\6\0"+
    "\1\10\1\0\4\10\1\53\3\0\1\10\1\0\3\10"+
    "\3\0\23\10\1\367\6\10\2\0\1\10\6\0\1\10"+
    "\1\0\4\10\1\53\3\0\1\10\1\0\3\10\3\0"+
    "\25\10\1\370\4\10\2\0\1\10\6\0\1\10\1\0"+
    "\4\10\1\53\3\0\1\10\1\0\3\10\3\0\1\371"+
    "\31\10\2\0\1\10\6\0\1\10\1\0\4\10\1\53"+
    "\3\0\1\10\1\0\3\10\3\0\6\10\1\372\23\10"+
    "\2\0\1\10\6\0\1\10\1\0\4\10\1\53\3\0"+
    "\1\10\1\0\3\10\3\0\17\10\1\373\12\10\2\0"+
    "\1\10\6\0\1\10\1\0\4\10\1\53\3\0\1\10"+
    "\1\0\3\10\3\0\15\10\1\374\14\10\2\0\1\10"+
    "\6\0\1\10\1\0\4\10\1\53\3\0\1\10\1\0"+
    "\3\10\3\0\23\10\1\375\6\10\2\0\1\10\6\0"+
    "\1\10\1\0\4\10\1\53\3\0\1\10\1\0\3\10"+
    "\3\0\13\10\1\376\16\10\2\0\1\10\6\0\1\10"+
    "\1\0\4\10\1\53\3\0\1\10\1\0\3\10\3\0"+
    "\1\377\31\10\2\0\1\10\6\0\1\10\1\0\4\10"+
    "\1\53\3\0\1\10\1\0\3\10\3\0\27\10\1\u0100"+
    "\2\10\2\0\1\10\6\0\1\10\1\0\4\10\1\53"+
    "\3\0\1\10\1\0\3\10\3\0\23\10\1\u0101\6\10"+
    "\2\0\1\10\6\0\1\10\1\0\4\10\1\53\3\0"+
    "\1\u0102\1\0\3\10\3\0\32\10\2\0\1\10\6\0"+
    "\1\10\1\0\4\10\1\53\3\0\1\10\1\0\3\10"+
    "\3\0\22\10\1\u0103\7\10\2\0\1\10\6\0\1\10"+
    "\1\0\4\10\1\53\3\0\1\10\1\0\3\10\3\0"+
    "\25\10\1\u0104\4\10\2\0\1\10\6\0\1\10\1\0"+
    "\4\10\1\53\3\0\1\10\1\0\3\10\3\0\15\10"+
    "\1\u0105\14\10\2\0\1\10\6\0\1\10\1\0\4\10"+
    "\1\53\3\0\1\10\1\0\3\10\3\0\7\10\1\u0106"+
    "\22\10\2\0\1\10\6\0\1\10\1\0\4\10\1\53"+
    "\3\0\1\10\1\0\2\10\1\u0107\3\0\22\10\1\u0108"+
    "\7\10\2\0\1\10\6\0\1\10\1\0\4\10\1\53"+
    "\3\0\1\10\1\0\3\10\3\0\10\10\1\u0109\21\10"+
    "\2\0\1\10\6\0\1\10\1\0\4\10\1\53\3\0"+
    "\1\10\1\0\3\10\3\0\16\10\1\u010a\13\10\2\0"+
    "\1\10\6\0\1\10\1\0\4\10\1\53\3\0\1\10"+
    "\1\0\3\10\3\0\4\10\1\u010b\25\10\2\0\1\10"+
    "\6\0\1\10\1\0\4\10\1\53\3\0\1\10\1\0"+
    "\3\10\3\0\4\10\1\u010c\25\10\2\0\1\10\6\0"+
    "\1\10\1\0\4\10\1\53\3\0\1\10\1\0\3\10"+
    "\3\0\10\10\1\u010d\21\10\2\0\1\10\6\0\1\10"+
    "\1\0\4\10\1\53\3\0\1\10\1\0\3\10\3\0"+
    "\13\10\1\u010e\16\10\2\0\1\10\6\0\1\10\1\0"+
    "\4\10\1\53\3\0\1\10\1\0\3\10\3\0\16\10"+
    "\1\u010f\13\10\2\0\1\10\6\0\1\10\1\0\4\10"+
    "\1\53\3\0\1\10\1\0\3\10\3\0\23\10\1\u0110"+
    "\6\10\2\0\1\10\6\0\1\10\1\0\4\10\1\53"+
    "\3\0\1\u0111\1\0\3\10\3\0\32\10\2\0\1\10"+
    "\6\0\1\10\1\0\4\10\1\53\3\0\1\10\1\0"+
    "\3\10\3\0\4\10\1\u0112\25\10\2\0\1\10\6\0"+
    "\1\10\1\0\4\10\1\53\3\0\1\u0113\1\0\3\10"+
    "\3\0\32\10\2\0\1\10\6\0\1\10\1\0\4\10"+
    "\1\53\3\0\1\10\1\0\3\10\3\0\1\u0114\31\10"+
    "\2\0\1\10\6\0\1\10\1\0\4\10\1\53\3\0"+
    "\1\10\1\0\3\10\3\0\4\10\1\u0115\25\10\2\0"+
    "\1\10\6\0\1\10\1\0\4\10\1\53\3\0\1\10"+
    "\1\0\3\10\3\0\7\10\1\u0116\22\10\2\0\1\10"+
    "\6\0\1\10\1\0\4\10\1\53\3\0\1\10\1\0"+
    "\3\10\3\0\16\10\1\u0117\13\10\2\0\1\10\6\0"+
    "\1\10\1\0\4\10\1\53\3\0\1\10\1\0\2\u0118"+
    "\1\10\3\0\32\u0118\2\0\1\10\33\0\1\u0119\104\0"+
    "\1\u011a\66\0\1\u011b\37\0\1\u011c\101\0\1\u011d\72\0"+
    "\1\u011e\54\0\1\u011f\51\0\1\u0120\113\0\1\u0121\60\0"+
    "\1\u0122\31\0\1\u0123\52\0\1\10\1\0\4\10\1\53"+
    "\3\0\1\10\1\0\3\10\3\0\21\10\1\u0124\10\10"+
    "\2\0\1\10\6\0\1\10\1\0\4\10\1\53\3\0"+
    "\1\10\1\0\3\10\3\0\21\10\1\u0125\10\10\2\0"+
    "\1\10\6\0\1\10\1\0\4\10\1\53\3\0\1\10"+
    "\1\0\3\10\3\0\1\10\1\u0126\30\10\2\0\1\10"+
    "\6\0\1\10\1\0\4\10\1\53\3\0\1\10\1\0"+
    "\3\10\3\0\15\10\1\u0127\14\10\2\0\1\10\6\0"+
    "\1\10\1\0\4\10\1\53\3\0\1\10\1\0\3\10"+
    "\3\0\4\10\1\u0128\25\10\2\0\1\10\6\0\1\10"+
    "\1\0\4\10\1\53\3\0\1\10\1\0\3\10\3\0"+
    "\30\10\1\u0129\1\10\2\0\1\10\6\0\1\10\1\0"+
    "\4\10\1\53\3\0\1\10\1\0\3\10\3\0\23\10"+
    "\1\u012a\6\10\2\0\1\10\6\0\1\10\1\0\4\10"+
    "\1\53\3\0\1\10\1\0\3\10\3\0\3\10\1\u012b"+
    "\26\10\2\0\1\10\6\0\1\10\1\0\4\10\1\53"+
    "\3\0\1\10\1\0\3\10\3\0\24\10\1\u012c\5\10"+
    "\2\0\1\10\6\0\1\10\1\0\4\10\1\53\3\0"+
    "\1\10\1\0\3\10\3\0\12\10\1\u012d\17\10\2\0"+
    "\1\10\6\0\1\10\1\0\4\10\1\53\3\0\1\10"+
    "\1\0\3\10\3\0\10\10\1\u012e\21\10\2\0\1\10"+
    "\6\0\1\10\1\0\4\10\1\53\3\0\1\10\1\0"+
    "\3\10\3\0\4\10\1\u012f\25\10\2\0\1\10\6\0"+
    "\1\10\1\0\4\10\1\53\3\0\1\10\1\0\3\10"+
    "\3\0\15\10\1\u0130\14\10\2\0\1\10\6\0\1\10"+
    "\1\0\4\10\1\53\3\0\1\10\1\0\3\10\3\0"+
    "\23\10\1\u0131\6\10\2\0\1\10\6\0\1\10\1\0"+
    "\4\10\1\53\3\0\1\10\1\0\3\10\3\0\13\10"+
    "\1\u0132\16\10\2\0\1\10\6\0\1\10\1\0\4\10"+
    "\1\53\3\0\1\10\1\0\3\10\3\0\5\10\1\u0133"+
    "\14\10\1\u0134\7\10\2\0\1\10\6\0\1\10\1\0"+
    "\4\10\1\53\3\0\1\10\1\0\3\10\3\0\10\10"+
    "\1\u0135\21\10\2\0\1\10\6\0\1\10\1\0\4\10"+
    "\1\53\3\0\1\10\1\0\3\10\3\0\1\u0136\31\10"+
    "\2\0\1\10\6\0\1\10\1\0\4\10\1\53\3\0"+
    "\1\10\1\0\3\10\3\0\23\10\1\u0137\6\10\2\0"+
    "\1\10\6\0\1\10\1\0\4\10\1\53\3\0\1\10"+
    "\1\u0138\3\10\3\0\32\10\2\0\1\10\6\0\1\10"+
    "\1\0\4\10\1\53\3\0\1\10\1\0\2\10\1\u0107"+
    "\3\0\32\10\2\0\1\10\6\0\1\10\1\0\4\10"+
    "\1\53\3\0\1\10\1\0\3\10\3\0\5\10\1\u0139"+
    "\24\10\2\0\1\10\6\0\1\10\1\0\4\10\1\53"+
    "\3\0\1\10\1\0\3\10\3\0\15\10\1\u013a\14\10"+
    "\2\0\1\10\6\0\1\10\1\0\4\10\1\53\3\0"+
    "\1\10\1\0\3\10\3\0\21\10\1\u013b\10\10\2\0"+
    "\1\10\6\0\1\10\1\0\4\10\1\53\3\0\1\10"+
    "\1\0\3\10\3\0\2\10\1\u013c\27\10\2\0\1\10"+
    "\6\0\1\10\1\0\4\10\1\53\3\0\1\10\1\0"+
    "\3\10\3\0\4\10\1\u013d\25\10\2\0\1\10\6\0"+
    "\1\10\1\0\4\10\1\53\3\0\1\10\1\0\3\10"+
    "\3\0\22\10\1\u013e\7\10\2\0\1\10\6\0\1\10"+
    "\1\0\4\10\1\53\3\0\1\10\1\0\3\10\3\0"+
    "\21\10\1\u013f\10\10\2\0\1\10\6\0\1\10\1\0"+
    "\4\10\1\53\3\0\1\10\1\0\3\10\3\0\1\u0140"+
    "\31\10\2\0\1\10\6\0\1\10\1\0\4\10\1\53"+
    "\3\0\1\10\1\0\3\10\3\0\15\10\1\u0141\14\10"+
    "\2\0\1\10\6\0\1\10\1\0\4\10\1\53\3\0"+
    "\1\10\1\0\3\10\3\0\26\10\1\u0142\3\10\2\0"+
    "\1\10\6\0\1\10\1\0\4\10\1\53\3\0\1\10"+
    "\1\0\2\u0143\1\10\3\0\32\u0143\2\0\1\10\60\0"+
    "\1\u0144\57\0\1\u0145\44\0\1\u0146\73\0\1\u0147\62\0"+
    "\1\u0148\60\0\1\u0149\75\0\1\u014a\72\0\1\u014b\54\0"+
    "\1\u014c\50\0\1\u014d\43\0\1\10\1\0\4\10\1\53"+
    "\3\0\1\10\1\0\3\10\3\0\16\10\1\u014e\13\10"+
    "\2\0\1\10\6\0\1\10\1\0\4\10\1\53\3\0"+
    "\1\10\1\0\3\10\3\0\16\10\1\u014f\13\10\2\0"+
    "\1\10\6\0\1\10\1\0\4\10\1\53\3\0\1\10"+
    "\1\0\3\10\3\0\21\10\1\u0150\10\10\2\0\1\10"+
    "\6\0\1\10\1\0\4\10\1\53\3\0\1\10\1\0"+
    "\3\10\3\0\16\10\1\u0151\13\10\2\0\1\10\6\0"+
    "\1\10\1\0\4\10\1\53\3\0\1\10\1\0\3\10"+
    "\3\0\23\10\1\u0152\6\10\2\0\1\10\6\0\1\10"+
    "\1\0\4\10\1\53\3\0\1\10\1\0\3\10\3\0"+
    "\16\10\1\u0153\13\10\2\0\1\10\6\0\1\10\1\0"+
    "\4\10\1\53\3\0\1\10\1\0\3\10\3\0\2\10"+
    "\1\u0154\27\10\2\0\1\10\6\0\1\10\1\0\4\10"+
    "\1\53\3\0\1\10\1\0\3\10\3\0\1\u0155\31\10"+
    "\2\0\1\10\6\0\1\10\1\0\4\10\1\53\3\0"+
    "\1\10\1\0\3\10\3\0\4\10\1\u0156\25\10\2\0"+
    "\1\10\6\0\1\10\1\0\4\10\1\53\3\0\1\10"+
    "\1\0\3\10\3\0\1\u0157\31\10\2\0\1\10\6\0"+
    "\1\10\1\0\4\10\1\53\3\0\1\10\1\0\3\10"+
    "\3\0\10\10\1\u0158\21\10\2\0\1\10\6\0\1\10"+
    "\1\0\4\10\1\53\3\0\1\10\1\0\3\10\3\0"+
    "\1\u0159\31\10\2\0\1\10\21\0\1\u015a\51\0\1\10"+
    "\1\0\4\10\1\53\3\0\1\10\1\0\3\10\3\0"+
    "\30\10\1\u015b\1\10\2\0\1\10\6\0\1\10\1\0"+
    "\4\10\1\53\3\0\1\10\1\0\3\10\3\0\12\10"+
    "\1\u015c\17\10\2\0\1\10\6\0\1\10\1\0\4\10"+
    "\1\53\3\0\1\10\1\0\3\10\3\0\4\10\1\u015d"+
    "\25\10\2\0\1\10\6\0\1\10\1\0\4\10\1\53"+
    "\3\0\1\10\1\0\3\10\3\0\13\10\1\u015e\16\10"+
    "\2\0\1\10\6\0\1\10\1\0\4\10\1\53\3\0"+
    "\1\10\1\0\3\10\3\0\1\u015f\31\10\2\0\1\10"+
    "\46\0\1\u0160\64\0\1\u0161\50\0\1\u0162\62\0\1\u0163"+
    "\70\0\1\u0164\36\0\1\10\1\0\4\10\1\53\3\0"+
    "\1\10\1\0\3\10\3\0\24\10\1\u0165\5\10\2\0"+
    "\1\10\6\0\1\10\1\0\4\10\1\53\3\0\1\10"+
    "\1\0\3\10\3\0\27\10\1\u0166\2\10\2\0\1\10"+
    "\6\0\1\10\1\0\4\10\1\53\3\0\1\10\1\0"+
    "\3\10\3\0\15\10\1\u0167\14\10\2\0\1\10\6\0"+
    "\1\10\1\0\4\10\1\53\3\0\1\10\1\0\3\10"+
    "\3\0\15\10\1\u0168\14\10\2\0\1\10\6\0\1\10"+
    "\1\0\4\10\1\53\3\0\1\10\1\0\3\10\3\0"+
    "\23\10\1\u0169\6\10\2\0\1\10\6\0\1\10\1\0"+
    "\4\10\1\53\3\0\1\10\1\0\3\10\3\0\21\10"+
    "\1\u016a\10\10\2\0\1\10\6\0\1\10\1\0\4\10"+
    "\1\53\3\0\1\10\1\0\3\10\3\0\14\10\1\u016b"+
    "\15\10\2\0\1\10\6\0\1\10\1\0\4\10\1\53"+
    "\3\0\1\10\1\0\3\10\3\0\31\10\1\u016c\2\0"+
    "\1\10\6\0\1\u016d\1\0\4\u016d\4\0\5\u016d\1\0"+
    "\1\u016d\1\0\32\u016d\2\0\1\u016d\6\0\1\10\1\0"+
    "\4\10\1\53\3\0\1\10\1\0\3\10\3\0\21\10"+
    "\1\u016e\10\10\2\0\1\10\6\0\1\10\1\0\4\10"+
    "\1\53\3\0\1\10\1\0\3\10\3\0\10\10\1\u016f"+
    "\21\10\2\0\1\10\45\0\1\u0170\64\0\1\u0171\72\0"+
    "\1\u0172\62\0\1\u0173\21\0\1\10\1\0\4\10\1\53"+
    "\3\0\1\10\1\0\3\10\3\0\15\10\1\u0174\14\10"+
    "\2\0\1\10\6\0\1\10\1\0\4\10\1\53\3\0"+
    "\1\10\1\0\3\10\3\0\4\10\1\u0175\25\10\2\0"+
    "\1\10\6\0\1\10\1\0\4\10\1\53\3\0\1\10"+
    "\1\0\3\10\3\0\10\10\1\u0176\21\10\2\0\1\10"+
    "\6\0\1\10\1\0\4\10\1\53\3\0\1\10\1\0"+
    "\3\10\3\0\4\10\1\u0177\25\10\2\0\1\10\6\0"+
    "\1\10\1\0\4\10\1\53\3\0\1\10\1\0\3\10"+
    "\3\0\10\10\1\u0178\21\10\2\0\1\10\6\0\1\10"+
    "\1\0\4\10\1\53\3\0\1\10\1\0\3\10\3\0"+
    "\6\10\1\u0179\23\10\2\0\1\10\34\0\1\u017a\36\0"+
    "\1\10\1\0\4\10\1\53\3\0\1\10\1\0\3\10"+
    "\3\0\3\10\1\u017b\26\10\2\0\1\10\6\0\1\10"+
    "\1\0\4\10\1\53\3\0\1\10\1\0\3\10\3\0"+
    "\1\u017c\31\10\2\0\1\10\6\0\1\10\1\0\4\10"+
    "\1\53\3\0\1\10\1\0\3\10\3\0\13\10\1\u017d"+
    "\16\10\2\0\1\10\6\0\1\10\1\0\4\10\1\53"+
    "\3\0\1\10\1\0\3\10\3\0\5\10\1\u017e\24\10"+
    "\2\0\1\10\6\0\1\10\1\0\4\10\1\53\3\0"+
    "\1\10\1\0\3\10\3\0\15\10\1\u017f\14\10\2\0"+
    "\1\10\30\0\1\u0180\42\0\1\10\1\0\4\10\1\53"+
    "\3\0\1\10\1\0\3\10\3\0\30\10\1\u0181\1\10"+
    "\2\0\1\10\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[15264];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\1\11\3\1\4\11\31\1\2\11"+
    "\2\1\1\0\1\11\2\1\1\0\2\1\1\0\3\11"+
    "\50\1\2\11\1\1\1\11\1\1\1\0\1\1\1\0"+
    "\66\1\6\0\1\11\3\0\72\1\2\0\1\11\1\0"+
    "\1\11\10\0\54\1\2\0\1\11\10\0\24\1\1\0"+
    "\13\1\1\11\1\0\2\11\2\0\1\11\2\0\1\11"+
    "\14\1\1\0\5\1\4\0\1\11\13\1\3\11\1\0"+
    "\6\1\1\0\5\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[385];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    //----> Codigo de usuario en sintaxis java


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Symbols.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error Lexico"+yytext()+" Linea "+yyline+" Columna "+yycolumn);
            }
          // fall through
          case 108: break;
          case 2:
            { /* Espacios en blanco, se ignoran */
            }
          // fall through
          case 109: break;
          case 3:
            { System.out.println("Recognized: ! at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Not, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 110: break;
          case 4:
            { System.out.println("Recognized: \" at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Quotes, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 111: break;
          case 5:
            { System.out.println("Recognized: textVal at line " + (yyline +1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Text, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 112: break;
          case 6:
            { System.out.println("Recognized: ( at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.ParOpen, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 113: break;
          case 7:
            { System.out.println("Recognized: ) at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.ParClose, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 114: break;
          case 8:
            { System.out.println("Recognized: * at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Mult, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 115: break;
          case 9:
            { System.out.println("Recognized: + at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Plus, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 116: break;
          case 10:
            { System.out.println("Recognized: - at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Minus, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 117: break;
          case 11:
            { System.out.println("Recognized: / at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Div, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 118: break;
          case 12:
            { System.out.println("Recognized: number at line " + (yyline +1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Number, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 119: break;
          case 13:
            { System.out.println("Recognized: < at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.LessThan, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 120: break;
          case 14:
            { System.out.println("Recognized: = at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Assign, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 121: break;
          case 15:
            { System.out.println("Recognized: > at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.GreaterThan, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 122: break;
          case 16:
            { System.out.println("Recognized: [ at line " + (yyline +1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.BracketOpen, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 123: break;
          case 17:
            { System.out.println("Recognized: ] at line " + (yyline +1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.BracketClose, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 124: break;
          case 18:
            { /* Comentarios de una linea, se ignoran */ System.out.println("Comentario de una linea");
            }
          // fall through
          case 125: break;
          case 19:
            { System.out.println("Recognized: != at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.NotEqual, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 126: break;
          case 20:
            { System.out.println("Recognized: && at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.And, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 127: break;
          case 21:
            { System.out.println("Recognized: imageSize at line " + (yyline +1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.ImageSize, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 128: break;
          case 22:
            { System.out.println("Recognized: <= at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.LessEqual, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 129: break;
          case 23:
            { System.out.println("Recognized: == at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Equal, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 130: break;
          case 24:
            { System.out.println("Recognized: >= at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.GreaterEqual, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 131: break;
          case 25:
            { System.out.println("Recognized: id at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.id, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 132: break;
          case 26:
            { System.out.println("Recognized: || at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Or, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 133: break;
          case 27:
            { System.out.println("Recognized: functionName at line " + (yyline +1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.FunctionName, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 134: break;
          case 28:
            { System.out.println("Recognized: fontSize at line " + (yyline +1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.FontSize, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 135: break;
          case 29:
            { System.out.println("Recognized: alt at line " + (yyline +1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.altSentence, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 136: break;
          case 30:
            { System.out.println("Recognized: C_P at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.p, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 137: break;
          case 31:
            { System.out.println("Recognized: red at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Color, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 138: break;
          case 32:
            { System.out.println("Recognized: row at line " + (yyline +1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Row, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 139: break;
          case 33:
            { System.out.println("Recognized: src at line " + (yyline +1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.src, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 140: break;
          case 34:
            { System.out.println("Recognized: /C_P at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.pEnd, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 141: break;
          case 35:
            { System.out.println("Recognized: aqua at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Color, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 142: break;
          case 36:
            { System.out.println("Recognized: blue at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Color, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 143: break;
          case 37:
            { System.out.println("Recognized: cols at line " + (yyline +1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.ColsSentence, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 144: break;
          case 38:
            { System.out.println("Recognized: C_BR at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Br, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 145: break;
          case 39:
            { System.out.println("Recognized: C_CC at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Html, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 146: break;
          case 40:
            { System.out.println("Recognized: C_H1 at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.h1, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 147: break;
          case 41:
            { System.out.println("Recognized: gray at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Color, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 148: break;
          case 42:
            { System.out.println("Recognized: href at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.href, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 149: break;
          case 43:
            { System.out.println("Recognized: left at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.TextAlign, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 150: break;
          case 44:
            { System.out.println("Recognized: lime at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Color, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 151: break;
          case 45:
            { System.out.println("Recognized: name at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.name, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 152: break;
          case 46:
            { System.out.println("Recognized: navy at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Color, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 153: break;
          case 47:
            { System.out.println("Recognized: rows at line " + (yyline +1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.RowsSentence, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 154: break;
          case 48:
            { System.out.println("Recognized: teal at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Color, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 155: break;
          case 49:
            { System.out.println("Recognized: text at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Type, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 156: break;
          case 50:
            { System.out.println("Recognized: type at line " + (yyline +1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.TypeSentence, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 157: break;
          case 51:
            { System.out.println("Recognized: /C_CC at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.HtmlEnd, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 158: break;
          case 52:
            { System.out.println("Recognized: /C_H1 at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.h1End, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 159: break;
          case 53:
            { System.out.println("Recognized: Arial at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.FontFamily, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 160: break;
          case 54:
            { System.out.println("Recognized: black at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Color, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 161: break;
          case 55:
            { System.out.println("Recognized: class at line " + (yyline +1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.classSentence, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 162: break;
          case 56:
            { System.out.println("Recognized: color at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.ColorSentence, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 163: break;
          case 57:
            { System.out.println("Recognized: C_DIV at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.DivHtml, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 164: break;
          case 58:
            { System.out.println("Recognized: C_IMG at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Img, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 165: break;
          case 59:
            { System.out.println("Recognized: green at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Color, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 166: break;
          case 60:
            { System.out.println("Recognized: olive at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Color, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 167: break;
          case 61:
            { System.out.println("Recognized: radio at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Type, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 168: break;
          case 62:
            { System.out.println("Recognized: right at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.TextAlign, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 169: break;
          case 63:
            { System.out.println("Recognized: white at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Color, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 170: break;
          case 64:
            { System.out.println("Recognized: width at line " + (yyline +1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.width, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 171: break;
          case 65:
            { System.out.println("Recognized: /C_DIV at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.DivHtmlEnd, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 172: break;
          case 66:
            { System.out.println("Recognized: center at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.TextAlign, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 173: break;
          case 67:
            { System.out.println("Recognized: column at line " + (yyline +1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Column, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 174: break;
          case 68:
            { System.out.println("Recognized: C_BODY at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Body, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 175: break;
          case 69:
            { System.out.println("Recognized: C_HEAD at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Head, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 176: break;
          case 70:
            { System.out.println("Recognized: C_LINK at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Link, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 177: break;
          case 71:
            { System.out.println("Recognized: C_SPAN at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Span, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 178: break;
          case 72:
            { System.out.println("Recognized: Geneva at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.FontFamily, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 179: break;
          case 73:
            { System.out.println("Recognized: height at line " + (yyline +1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.height, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 180: break;
          case 74:
            { System.out.println("Recognized: maroon at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Color, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 181: break;
          case 75:
            { System.out.println("Recognized: number at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Type, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 182: break;
          case 76:
            { System.out.println("Recognized: purple at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Color, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 183: break;
          case 77:
            { System.out.println("Recognized: silver at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Color, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 184: break;
          case 78:
            { System.out.println("Recognized: yellow at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Color, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 185: break;
          case 79:
            { System.out.println("Recognized: hexadecimal at line " + (yyline +1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Hexadecimal, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 186: break;
          case 80:
            { System.out.println("Recognized: /C_BODY at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.BodyEnd, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 187: break;
          case 81:
            { System.out.println("Recognized: /C_HEAD at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.HeadEnd, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 188: break;
          case 82:
            { System.out.println("Recognized: /C_LINK at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.LinkEnd, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 189: break;
          case 83:
            { System.out.println("Recognized: /C_SPAN at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.SpanEnd, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 190: break;
          case 84:
            { /* Comentarios multilinea, se ignoran */ System.out.println("Comentario multilinea");
            }
          // fall through
          case 191: break;
          case 85:
            { System.out.println("Recognized: Courier at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.FontFamily, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 192: break;
          case 86:
            { System.out.println("Recognized: C_INPUT at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Input, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 193: break;
          case 87:
            { System.out.println("Recognized: C_TITLE at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Title, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 194: break;
          case 88:
            { System.out.println("Recognized: fuchsia at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Color, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 195: break;
          case 89:
            { System.out.println("Recognized: justify at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.TextAlign, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 196: break;
          case 90:
            { System.out.println("Recognized: onclick() at line " + (yyline +1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.onclickSentence, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 197: break;
          case 91:
            { System.out.println("Recognized: Verdana at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.FontFamily, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 198: break;
          case 92:
            { System.out.println("Recognized: /C_TITLE at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.TitleEnd, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 199: break;
          case 93:
            { System.out.println("Recognized: checkbox at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Type, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 200: break;
          case 94:
            { System.out.println("Recognized: C_BUTTON at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Button, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 201: break;
          case 95:
            { System.out.println("Recognized: C_OPTION at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Option, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 202: break;
          case 96:
            { System.out.println("Recognized: C_SELECTED at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Select, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 203: break;
          case 97:
            { System.out.println("Recognized: linkVal at line " + (yyline +1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.LinkHtml, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 204: break;
          case 98:
            { System.out.println("Recognized: /C_BUTTON at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.ButtonEnd, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 205: break;
          case 99:
            { System.out.println("Recognized: /C_OPTION at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.OptionEnd, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 206: break;
          case 100:
            { System.out.println("Recognized: /C_SELECTED at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.SelectEnd, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 207: break;
          case 101:
            { System.out.println("Recognized: font-size at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.FontSizeSentence, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 208: break;
          case 102:
            { System.out.println("Recognized: background at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Background, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 209: break;
          case 103:
            { System.out.println("Recognized: C_TEXTAREA at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.Textarea, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 210: break;
          case 104:
            { System.out.println("Recognized: sans-serif at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.FontFamily, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 211: break;
          case 105:
            { System.out.println("Recognized: text-align at line " + (yyline +1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.TextAlignSentence, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 212: break;
          case 106:
            { System.out.println("Recognized: /C_TEXTAREA at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.TextareaEnd, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 213: break;
          case 107:
            { System.out.println("Recognized: font-family at line " + (yyline + 1) + ", column " + (yycolumn + 1) + ", text: " + yytext()); return new Symbol(Symbols.FontFamilySentence, (yycolumn + 1), (yyline + 1), (yytext()));
            }
          // fall through
          case 214: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
