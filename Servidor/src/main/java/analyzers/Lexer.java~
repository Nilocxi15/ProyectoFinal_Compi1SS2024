// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: lexer.flex

/*------------  1ra Area: Codigo de Usuario ---------*/
//------> Paquetes,importaciones
package analyzers;

import java_cup.runtime.*;

/*------------  2da Area: Opciones y Declaraciones ---------*/

@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  1,  4,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  5,  6,  7,  0,  8,  9,  0, 10, 11, 12, 13,  0, 14,  8, 15, 
    16, 17, 16, 16, 16, 16, 16, 16, 16, 16,  8,  0, 18, 19, 20,  8, 
     0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 
    36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,  0,  0,  0,  0, 47, 
     0, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 
    63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,  0, 74,  0,  0,  0, 
     0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 75,  0,  0,  0,  0,  0,  0,  0, 75,  0,  0,  0, 75,  0,  0, 
     0, 75,  0, 75,  0,  0,  0,  0,  0,  0, 75,  0,  0,  0,  0,  0, 
     0, 75,  0,  0,  0,  0,  0,  0,  0, 75,  0,  0,  0, 75,  0,  0, 
     0, 75,  0, 75,  0,  0,  0,  0,  0,  0, 75,  0,  0,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\1\2\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\24\20\1\1\1\21\1\22\1\0\1\23\2\20"+
    "\1\0\1\24\1\25\1\26\16\20\1\27\24\20\1\30"+
    "\2\21\1\0\1\31\1\0\1\32\20\20\1\33\23\20"+
    "\1\34\12\20\2\0\1\35\3\20\1\36\3\20\1\37"+
    "\2\20\1\40\1\20\1\41\1\20\1\42\14\20\1\43"+
    "\1\20\1\44\1\20\1\45\1\46\1\20\1\47\1\50"+
    "\6\20\1\51\2\20\1\52\1\53\1\54\3\20\2\0"+
    "\1\55\1\20\1\56\2\20\1\57\3\20\1\60\1\20"+
    "\1\61\12\20\1\62\3\20\1\63\2\20\1\64\1\65"+
    "\4\20\1\66\1\20\2\0\1\20\1\67\2\20\1\70"+
    "\1\20\1\71\1\20\1\72\2\20\1\73\5\20\1\74"+
    "\1\20\1\75\1\76\1\20\1\77\1\20\1\100\2\20"+
    "\1\101\1\102\1\0\2\20\1\103\1\20\1\104\3\20"+
    "\1\105\2\20\1\106\1\107\3\20\1\110\1\111\1\20"+
    "\1\112\1\113\1\114\4\20\1\0\6\20\1\115\1\116"+
    "\2\20\1\117\1\120\1\121\1\20\1\122\1\123\1\124";

  private static int [] zzUnpackAction() {
    int [] result = new int[308];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\114\0\114\0\230\0\344\0\114\0\u0130\0\u017c"+
    "\0\u01c8\0\114\0\114\0\114\0\114\0\u0214\0\u017c\0\u0260"+
    "\0\u02ac\0\u02f8\0\u0344\0\u0390\0\u03dc\0\u0428\0\u0214\0\u0474"+
    "\0\u04c0\0\u050c\0\u0558\0\u05a4\0\u05f0\0\u063c\0\u0688\0\u06d4"+
    "\0\u0720\0\u076c\0\u07b8\0\u0804\0\u0850\0\u089c\0\u08e8\0\u0934"+
    "\0\u0980\0\114\0\u09cc\0\u017c\0\u0260\0\u0a18\0\u0a64\0\114"+
    "\0\u017c\0\114\0\u0ab0\0\u0afc\0\u0b48\0\u0b94\0\u0be0\0\u0c2c"+
    "\0\u0c78\0\u0cc4\0\u0d10\0\u0d5c\0\u0da8\0\u0df4\0\u0e40\0\u0e8c"+
    "\0\u0214\0\u0ed8\0\u0f24\0\u0f70\0\u0fbc\0\u1008\0\u1054\0\u10a0"+
    "\0\u10ec\0\u1138\0\u1184\0\u11d0\0\u121c\0\u1268\0\u12b4\0\u1300"+
    "\0\u134c\0\u1398\0\u13e4\0\u1430\0\u147c\0\114\0\114\0\u14c8"+
    "\0\u1514\0\u0214\0\u1560\0\u0214\0\u15ac\0\u15f8\0\u1644\0\u1690"+
    "\0\u16dc\0\u1728\0\u1774\0\u17c0\0\u180c\0\u1858\0\u18a4\0\u18f0"+
    "\0\u193c\0\u1988\0\u19d4\0\u1a20\0\u0214\0\u1a6c\0\u1ab8\0\u1b04"+
    "\0\u1b50\0\u1b9c\0\u1be8\0\u1c34\0\u1c80\0\u1ccc\0\u1d18\0\u1d64"+
    "\0\u1db0\0\u1dfc\0\u1e48\0\u1e94\0\u1ee0\0\u1f2c\0\u1f78\0\u1fc4"+
    "\0\u0214\0\u2010\0\u205c\0\u20a8\0\u20f4\0\u2140\0\u218c\0\u21d8"+
    "\0\u2224\0\u2270\0\u22bc\0\u2308\0\u2354\0\u0214\0\u23a0\0\u23ec"+
    "\0\u2438\0\u0214\0\u2484\0\u24d0\0\u251c\0\u0214\0\u2568\0\u25b4"+
    "\0\u0214\0\u2600\0\u0214\0\u264c\0\u0214\0\u2698\0\u26e4\0\u2730"+
    "\0\u277c\0\u27c8\0\u2814\0\u2860\0\u28ac\0\u28f8\0\u2944\0\u2990"+
    "\0\u29dc\0\u0214\0\u2a28\0\u0214\0\u2a74\0\u0214\0\u0214\0\u2ac0"+
    "\0\u0214\0\u0214\0\u2b0c\0\u2b58\0\u2ba4\0\u2bf0\0\u2c3c\0\u2c88"+
    "\0\u0214\0\u2cd4\0\u2d20\0\u0214\0\u2d6c\0\u0214\0\u2db8\0\u2e04"+
    "\0\u2e50\0\u2e9c\0\u2ee8\0\u0214\0\u2f34\0\u0214\0\u2f80\0\u2fcc"+
    "\0\u0214\0\u3018\0\u3064\0\u30b0\0\u0214\0\u30fc\0\u0214\0\u3148"+
    "\0\u3194\0\u31e0\0\u322c\0\u3278\0\u32c4\0\u3310\0\u335c\0\u33a8"+
    "\0\u33f4\0\u0214\0\u3440\0\u348c\0\u34d8\0\u0214\0\u3524\0\u3570"+
    "\0\u0214\0\u0214\0\u35bc\0\u3608\0\u3654\0\u36a0\0\u0214\0\u36ec"+
    "\0\u3738\0\u3784\0\u37d0\0\u0214\0\u381c\0\u3868\0\u0214\0\u38b4"+
    "\0\u0214\0\u3900\0\u0214\0\u394c\0\u3998\0\u0214\0\u39e4\0\u3a30"+
    "\0\u3a7c\0\u3ac8\0\u3b14\0\u0214\0\u3b60\0\u0214\0\u0214\0\u3bac"+
    "\0\u0214\0\u3bf8\0\u0214\0\u3c44\0\u3c90\0\u0214\0\114\0\u3cdc"+
    "\0\u3d28\0\u3d74\0\u0214\0\u3dc0\0\u0214\0\u3e0c\0\u3e58\0\u3ea4"+
    "\0\u0214\0\u3ef0\0\u3f3c\0\u0214\0\u0214\0\u3f88\0\u3fd4\0\u4020"+
    "\0\u0214\0\114\0\u406c\0\u0214\0\u0214\0\u0214\0\u40b8\0\u4104"+
    "\0\u4150\0\u419c\0\u41e8\0\u4234\0\u4280\0\u42cc\0\u4318\0\u4364"+
    "\0\u43b0\0\u0214\0\114\0\u43fc\0\u4448\0\u0214\0\u0214\0\u0214"+
    "\0\u4494\0\u0214\0\u0214\0\u0214";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[308];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\2\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\2\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\27\1\35\1\36\1\37"+
    "\1\40\1\41\1\27\1\42\1\43\1\44\1\27\1\45"+
    "\1\46\1\27\1\47\2\27\1\24\1\25\1\26\2\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\27\1\35\1\36"+
    "\1\37\1\40\1\41\1\27\1\42\1\43\1\44\1\27"+
    "\1\45\1\46\1\27\1\47\1\27\1\50\1\27\116\0"+
    "\1\3\116\0\1\51\15\0\1\52\110\0\2\53\3\0"+
    "\32\53\45\0\2\10\4\0\4\10\1\0\1\10\1\0"+
    "\65\10\1\0\1\10\10\0\1\10\1\54\4\0\4\10"+
    "\1\0\1\10\1\0\65\10\1\0\1\10\10\0\2\10"+
    "\4\0\1\27\1\10\2\27\1\0\1\10\1\0\65\27"+
    "\1\0\1\27\10\0\2\10\4\0\1\27\1\10\2\55"+
    "\1\0\1\10\1\0\17\27\1\56\32\27\1\56\12\27"+
    "\1\0\1\27\5\0\1\57\15\0\1\60\100\0\2\10"+
    "\4\0\4\10\1\0\1\61\1\0\65\10\1\0\1\10"+
    "\23\0\1\62\100\0\2\10\4\0\1\27\1\10\2\27"+
    "\1\0\1\10\1\0\13\27\1\63\4\27\1\64\1\65"+
    "\24\27\1\63\4\27\1\64\1\65\10\27\1\0\1\27"+
    "\10\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\1\66\12\27\1\67\17\27\1\66\12\27\1\67"+
    "\16\27\1\0\1\27\10\0\2\10\4\0\1\27\1\10"+
    "\2\27\1\0\1\10\1\0\4\27\1\70\2\27\1\71"+
    "\6\27\1\72\13\27\1\73\4\27\1\70\2\27\1\71"+
    "\6\27\1\72\13\27\1\0\1\27\10\0\2\10\4\0"+
    "\1\27\1\10\2\27\1\0\1\10\1\0\16\27\1\74"+
    "\5\27\1\75\24\27\1\74\5\27\1\75\5\27\1\0"+
    "\1\27\10\0\2\10\4\0\1\27\1\10\2\27\1\0"+
    "\1\10\1\0\4\27\1\76\14\27\1\77\15\27\1\76"+
    "\14\27\1\77\10\27\1\0\1\27\10\0\2\10\4\0"+
    "\1\27\1\10\2\27\1\0\1\10\1\0\21\27\1\100"+
    "\32\27\1\100\10\27\1\0\1\27\10\0\2\10\4\0"+
    "\1\27\1\10\2\27\1\0\1\10\1\0\3\27\1\101"+
    "\32\27\1\101\26\27\1\0\1\27\10\0\2\10\4\0"+
    "\1\27\1\10\2\27\1\0\1\10\1\0\24\27\1\102"+
    "\32\27\1\102\5\27\1\0\1\27\10\0\2\10\4\0"+
    "\1\27\1\10\2\27\1\0\1\10\1\0\4\27\1\103"+
    "\3\27\1\104\26\27\1\103\3\27\1\104\21\27\1\0"+
    "\1\27\10\0\2\10\4\0\1\27\1\10\2\27\1\0"+
    "\1\10\1\0\1\105\32\27\1\105\31\27\1\0\1\27"+
    "\10\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\1\106\23\27\1\107\6\27\1\106\23\27\1\107"+
    "\5\27\1\0\1\27\10\0\2\10\4\0\1\27\1\10"+
    "\2\27\1\0\1\10\1\0\13\27\1\110\1\27\1\111"+
    "\30\27\1\110\1\27\1\111\14\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\24\27\1\112\32\27\1\112\5\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\1\113\3\27\1\114\3\27\1\115\5\27\1\116\14\27"+
    "\1\113\3\27\1\114\3\27\1\115\5\27\1\116\13\27"+
    "\1\0\1\27\10\0\2\10\4\0\1\27\1\10\2\27"+
    "\1\0\1\10\1\0\1\117\7\27\1\120\22\27\1\117"+
    "\7\27\1\120\21\27\1\0\1\27\10\0\2\10\4\0"+
    "\1\27\1\10\2\27\1\0\1\10\1\0\4\27\1\121"+
    "\23\27\1\122\6\27\1\121\23\27\1\122\1\27\1\0"+
    "\1\27\10\0\2\10\4\0\1\27\1\10\2\27\1\0"+
    "\1\10\1\0\4\27\1\123\32\27\1\123\25\27\1\0"+
    "\1\27\10\0\2\10\4\0\1\27\1\10\2\27\1\0"+
    "\1\10\1\0\7\27\1\124\32\27\1\124\22\27\1\0"+
    "\1\27\10\0\2\10\4\0\1\27\1\10\2\27\1\0"+
    "\1\10\1\0\4\27\1\125\32\27\1\125\25\27\1\0"+
    "\1\27\112\0\1\126\1\0\2\51\1\127\1\51\1\130"+
    "\107\51\20\0\2\131\3\0\32\131\45\0\2\10\4\0"+
    "\1\27\1\10\2\27\1\0\1\10\1\0\27\27\1\132"+
    "\32\27\1\132\2\27\1\0\1\27\16\0\1\133\105\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\23\27\1\134\32\27\1\134\6\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\24\27\1\135\32\27\1\135\5\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\10\27\1\136\32\27\1\136\21\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\2\27\1\137\32\27\1\137\27\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\1\140\23\27\1\141\6\27\1\140\23\27\1\141\5\27"+
    "\1\0\1\27\10\0\2\10\4\0\1\27\1\10\2\27"+
    "\1\0\1\10\1\0\15\27\1\142\32\27\1\142\14\27"+
    "\1\0\1\27\10\0\2\10\4\0\1\27\1\10\2\27"+
    "\1\0\1\10\1\0\4\27\1\143\32\27\1\143\25\27"+
    "\1\0\1\27\10\0\2\10\4\0\1\27\1\10\2\27"+
    "\1\0\1\10\1\0\13\27\1\144\10\27\1\145\21\27"+
    "\1\144\10\27\1\145\5\27\1\0\1\27\10\0\2\10"+
    "\4\0\1\27\1\10\2\27\1\0\1\10\1\0\1\27"+
    "\1\146\1\147\1\150\3\27\1\151\1\152\2\27\1\153"+
    "\2\27\1\154\1\155\2\27\1\156\1\157\10\27\1\146"+
    "\1\147\1\150\3\27\1\151\1\152\2\27\1\153\2\27"+
    "\1\154\1\155\2\27\1\156\1\157\6\27\1\0\1\27"+
    "\10\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\15\27\1\160\32\27\1\160\14\27\1\0\1\27"+
    "\10\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\2\27\1\161\32\27\1\161\27\27\1\0\1\27"+
    "\10\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\15\27\1\162\32\27\1\162\14\27\1\0\1\27"+
    "\10\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\1\163\3\27\1\164\26\27\1\163\3\27\1\164"+
    "\25\27\1\0\1\27\10\0\2\10\4\0\1\27\1\10"+
    "\2\27\1\0\1\10\1\0\4\27\1\165\32\27\1\165"+
    "\25\27\1\0\1\27\10\0\2\10\4\0\1\27\1\10"+
    "\2\27\1\0\1\10\1\0\22\27\1\166\32\27\1\166"+
    "\7\27\1\0\1\27\10\0\2\10\4\0\1\27\1\10"+
    "\2\27\1\0\1\10\1\0\5\27\1\167\32\27\1\167"+
    "\24\27\1\0\1\27\10\0\2\10\4\0\1\27\1\10"+
    "\2\27\1\0\1\10\1\0\14\27\1\170\32\27\1\170"+
    "\15\27\1\0\1\27\10\0\2\10\4\0\1\27\1\10"+
    "\2\27\1\0\1\10\1\0\21\27\1\171\32\27\1\171"+
    "\10\27\1\0\1\27\10\0\2\10\4\0\1\27\1\10"+
    "\2\27\1\0\1\10\1\0\14\27\1\172\10\27\1\173"+
    "\21\27\1\172\10\27\1\173\4\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\14\27\1\174\32\27\1\174\15\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\10\27\1\175\32\27\1\175\21\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\2\27\1\176\32\27\1\176\27\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\21\27\1\177\32\27\1\177\10\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\3\27\1\200\32\27\1\200\26\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\3\27\1\201\32\27\1\201\26\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\6\27\1\202\32\27\1\202\23\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\26\27\1\203\32\27\1\203\3\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\15\27\1\204\32\27\1\204\14\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\13\27\1\205\32\27\1\205\16\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\1\206\26\27\1\207\3\27\1\206\26\27\1\207\2\27"+
    "\1\0\1\27\10\0\2\10\4\0\1\27\1\10\2\27"+
    "\1\0\1\10\1\0\17\27\1\210\32\27\1\210\12\27"+
    "\1\0\1\27\10\0\2\10\4\0\1\27\1\10\2\27"+
    "\1\0\1\10\1\0\21\27\1\211\32\27\1\211\10\27"+
    "\1\0\1\27\10\0\2\10\4\0\1\27\1\10\2\27"+
    "\1\0\1\10\1\0\10\27\1\212\32\27\1\212\21\27"+
    "\1\0\1\27\10\0\2\10\4\0\1\27\1\10\2\27"+
    "\1\0\1\10\1\0\13\27\1\213\32\27\1\213\16\27"+
    "\1\0\1\27\2\0\1\127\131\0\2\214\3\0\32\214"+
    "\53\0\1\215\105\0\2\10\4\0\1\27\1\10\2\27"+
    "\1\0\1\10\1\0\1\216\32\27\1\216\31\27\1\0"+
    "\1\27\10\0\2\10\4\0\1\27\1\10\2\27\1\0"+
    "\1\10\1\0\1\217\32\27\1\217\31\27\1\0\1\27"+
    "\10\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\12\27\1\220\32\27\1\220\17\27\1\0\1\27"+
    "\10\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\2\27\1\221\32\27\1\221\27\27\1\0\1\27"+
    "\10\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\4\27\1\222\32\27\1\222\25\27\1\0\1\27"+
    "\10\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\23\27\1\223\32\27\1\223\6\27\1\0\1\27"+
    "\10\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\2\27\1\224\32\27\1\224\27\27\1\0\1\27"+
    "\10\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\16\27\1\225\3\27\1\226\26\27\1\225\3\27"+
    "\1\226\7\27\1\0\1\27\10\0\2\10\4\0\1\27"+
    "\1\10\2\27\1\0\1\10\1\0\21\27\1\227\32\27"+
    "\1\227\10\27\1\0\1\27\10\0\2\10\4\0\1\27"+
    "\1\10\2\27\1\0\1\10\1\0\16\27\1\230\2\27"+
    "\1\231\2\27\1\232\24\27\1\230\2\27\1\231\2\27"+
    "\1\232\5\27\1\0\1\27\10\0\2\10\4\0\1\27"+
    "\1\10\2\27\1\0\1\10\1\0\2\27\1\233\32\27"+
    "\1\233\27\27\1\0\1\27\10\0\2\10\4\0\1\27"+
    "\1\10\2\27\1\0\1\10\1\0\10\27\1\234\32\27"+
    "\1\234\21\27\1\0\1\27\10\0\2\10\4\0\1\27"+
    "\1\10\1\27\1\235\1\0\1\10\1\0\4\27\1\236"+
    "\32\27\1\236\25\27\1\0\1\27\10\0\2\10\4\0"+
    "\1\27\1\10\2\27\1\0\1\10\1\0\14\27\1\237"+
    "\1\240\31\27\1\237\1\240\14\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\10\27\1\241\32\27\1\241\21\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\17\27\1\242\32\27\1\242\12\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\4\27\1\243\12\27\1\244\17\27\1\243\12\27\1\244"+
    "\12\27\1\0\1\27\10\0\2\10\4\0\1\27\1\10"+
    "\2\27\1\0\1\10\1\0\4\27\1\245\3\27\1\246"+
    "\26\27\1\245\3\27\1\246\21\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\23\27\1\247\32\27\1\247\6\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\7\27\1\250\32\27\1\250\22\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\4\27\1\251\32\27\1\251\25\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\30\27\1\252\32\27\1\252\1\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\4\27\1\253\32\27\1\253\25\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\5\27\1\254\32\27\1\254\24\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\23\27\1\255\32\27\1\255\6\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\23\27\1\256\32\27\1\256\6\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\4\27\1\257\32\27\1\257\25\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\16\27\1\260\32\27\1\260\13\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\4\27\1\261\32\27\1\261\25\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\30\27\1\262\32\27\1\262\1\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\1\27\1\263\32\27\1\263\30\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\25\27\1\264\32\27\1\264\4\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\13\27\1\265\32\27\1\265\16\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\17\27\1\266\32\27\1\266\12\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\10\27\1\267\32\27\1\267\21\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\7\27\1\270\32\27\1\270\22\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\22\27\1\271\32\27\1\271\7\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\22\27\1\272\32\27\1\272\7\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\25\27\1\273\32\27\1\273\4\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\13\27\1\274\32\27\1\274\16\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\23\27\1\275\32\27\1\275\6\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\4\27\1\276\32\27\1\276\25\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\3\27\1\277\32\27\1\277\26\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\23\27\1\300\32\27\1\300\6\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\13\27\1\301\32\27\1\301\16\27\1\0\1\27\20\0"+
    "\2\302\3\0\32\302\35\0\2\303\1\0\1\303\1\0"+
    "\107\303\10\0\2\10\4\0\1\27\1\10\2\27\1\0"+
    "\1\10\1\0\13\27\1\304\32\27\1\304\16\27\1\0"+
    "\1\27\10\0\2\10\4\0\1\27\1\10\2\27\1\0"+
    "\1\10\1\0\6\27\1\305\32\27\1\305\23\27\1\0"+
    "\1\27\10\0\2\10\4\0\1\27\1\10\2\27\1\0"+
    "\1\10\1\0\12\27\1\306\32\27\1\306\17\27\1\0"+
    "\1\27\10\0\2\10\4\0\1\27\1\10\2\27\1\0"+
    "\1\10\1\0\4\27\1\307\32\27\1\307\25\27\1\0"+
    "\1\27\10\0\2\10\4\0\1\27\1\10\2\27\1\0"+
    "\1\10\1\0\12\27\1\310\32\27\1\310\17\27\1\0"+
    "\1\27\10\0\2\10\4\0\1\27\1\10\2\27\1\0"+
    "\1\10\1\0\21\27\1\311\32\27\1\311\10\27\1\0"+
    "\1\27\10\0\2\10\4\0\1\27\1\10\2\27\1\0"+
    "\1\10\1\0\10\27\1\312\32\27\1\312\21\27\1\0"+
    "\1\27\10\0\2\10\4\0\1\27\1\10\2\27\1\0"+
    "\1\10\1\0\3\27\1\313\32\27\1\313\26\27\1\0"+
    "\1\27\10\0\2\10\4\0\1\27\1\10\2\27\1\0"+
    "\1\10\1\0\23\27\1\314\32\27\1\314\6\27\1\0"+
    "\1\27\10\0\2\10\4\0\1\27\1\10\2\27\1\0"+
    "\1\10\1\0\25\27\1\315\32\27\1\315\4\27\1\0"+
    "\1\27\10\0\2\10\4\0\1\27\1\10\2\27\1\0"+
    "\1\10\1\0\1\316\32\27\1\316\31\27\1\0\1\27"+
    "\10\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\6\27\1\317\32\27\1\317\23\27\1\0\1\27"+
    "\10\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\17\27\1\320\32\27\1\320\12\27\1\0\1\27"+
    "\10\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\15\27\1\321\32\27\1\321\14\27\1\0\1\27"+
    "\10\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\23\27\1\322\32\27\1\322\6\27\1\0\1\27"+
    "\10\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\13\27\1\323\32\27\1\323\16\27\1\0\1\27"+
    "\10\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\1\324\32\27\1\324\31\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\27\27\1\325\32\27\1\325\2\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\23\27\1\326\32\27\1\326\6\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\327\1\10\2\27\1\0\1\10\1\0"+
    "\65\27\1\0\1\27\10\0\2\10\4\0\1\27\1\10"+
    "\2\27\1\0\1\10\1\0\22\27\1\330\32\27\1\330"+
    "\7\27\1\0\1\27\10\0\2\10\4\0\1\27\1\10"+
    "\2\27\1\0\1\10\1\0\25\27\1\331\32\27\1\331"+
    "\4\27\1\0\1\27\10\0\2\10\4\0\1\27\1\10"+
    "\2\27\1\0\1\10\1\0\15\27\1\332\32\27\1\332"+
    "\14\27\1\0\1\27\10\0\2\10\4\0\1\27\1\10"+
    "\2\27\1\0\1\10\1\0\10\27\1\333\32\27\1\333"+
    "\21\27\1\0\1\27\10\0\2\10\4\0\1\27\1\10"+
    "\2\27\1\0\1\10\1\0\16\27\1\334\32\27\1\334"+
    "\13\27\1\0\1\27\10\0\2\10\4\0\1\27\1\10"+
    "\2\27\1\0\1\10\1\0\4\27\1\335\32\27\1\335"+
    "\25\27\1\0\1\27\10\0\2\10\4\0\1\27\1\10"+
    "\2\27\1\0\1\10\1\0\4\27\1\336\32\27\1\336"+
    "\25\27\1\0\1\27\10\0\2\10\4\0\1\27\1\10"+
    "\2\27\1\0\1\10\1\0\10\27\1\337\32\27\1\337"+
    "\21\27\1\0\1\27\10\0\2\10\4\0\1\27\1\10"+
    "\2\27\1\0\1\10\1\0\13\27\1\340\32\27\1\340"+
    "\16\27\1\0\1\27\10\0\2\10\4\0\1\27\1\10"+
    "\2\27\1\0\1\10\1\0\16\27\1\341\32\27\1\341"+
    "\13\27\1\0\1\27\10\0\2\10\4\0\1\27\1\10"+
    "\2\27\1\0\1\10\1\0\23\27\1\342\32\27\1\342"+
    "\6\27\1\0\1\27\10\0\2\10\4\0\1\343\1\10"+
    "\2\27\1\0\1\10\1\0\65\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\4\27\1\344\32\27\1\344\25\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\345\1\10\2\27\1\0\1\10\1\0"+
    "\65\27\1\0\1\27\10\0\2\10\4\0\1\27\1\10"+
    "\2\27\1\0\1\10\1\0\1\346\32\27\1\346\31\27"+
    "\1\0\1\27\10\0\2\10\4\0\1\27\1\10\2\27"+
    "\1\0\1\10\1\0\4\27\1\347\32\27\1\347\25\27"+
    "\1\0\1\27\10\0\2\10\4\0\1\27\1\10\2\27"+
    "\1\0\1\10\1\0\16\27\1\350\32\27\1\350\13\27"+
    "\1\0\1\27\20\0\2\351\3\0\32\351\53\0\1\352"+
    "\105\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\21\27\1\353\32\27\1\353\10\27\1\0\1\27"+
    "\10\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\21\27\1\354\32\27\1\354\10\27\1\0\1\27"+
    "\10\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\1\27\1\355\32\27\1\355\30\27\1\0\1\27"+
    "\10\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\4\27\1\356\32\27\1\356\25\27\1\0\1\27"+
    "\10\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\30\27\1\357\32\27\1\357\1\27\1\0\1\27"+
    "\10\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\23\27\1\360\32\27\1\360\6\27\1\0\1\27"+
    "\10\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\3\27\1\361\32\27\1\361\26\27\1\0\1\27"+
    "\10\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\24\27\1\362\32\27\1\362\5\27\1\0\1\27"+
    "\10\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\12\27\1\363\32\27\1\363\17\27\1\0\1\27"+
    "\10\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\10\27\1\364\32\27\1\364\21\27\1\0\1\27"+
    "\10\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\4\27\1\365\32\27\1\365\25\27\1\0\1\27"+
    "\10\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\15\27\1\366\32\27\1\366\14\27\1\0\1\27"+
    "\10\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\23\27\1\367\32\27\1\367\6\27\1\0\1\27"+
    "\10\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\13\27\1\370\32\27\1\370\16\27\1\0\1\27"+
    "\10\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\5\27\1\371\14\27\1\372\15\27\1\371\14\27"+
    "\1\372\7\27\1\0\1\27\10\0\2\10\4\0\1\27"+
    "\1\10\2\27\1\0\1\10\1\0\10\27\1\373\32\27"+
    "\1\373\21\27\1\0\1\27\10\0\2\10\4\0\1\27"+
    "\1\10\2\27\1\0\1\10\1\0\1\374\32\27\1\374"+
    "\31\27\1\0\1\27\10\0\2\10\4\0\1\27\1\10"+
    "\2\27\1\0\1\10\1\0\5\27\1\375\32\27\1\375"+
    "\24\27\1\0\1\27\10\0\2\10\4\0\1\27\1\10"+
    "\2\27\1\0\1\10\1\0\15\27\1\376\32\27\1\376"+
    "\14\27\1\0\1\27\10\0\2\10\4\0\1\27\1\10"+
    "\2\27\1\0\1\10\1\0\21\27\1\377\32\27\1\377"+
    "\10\27\1\0\1\27\10\0\2\10\4\0\1\27\1\10"+
    "\2\27\1\0\1\10\1\0\2\27\1\u0100\32\27\1\u0100"+
    "\27\27\1\0\1\27\10\0\2\10\4\0\1\27\1\10"+
    "\2\27\1\0\1\10\1\0\4\27\1\u0101\32\27\1\u0101"+
    "\25\27\1\0\1\27\10\0\2\10\4\0\1\27\1\10"+
    "\2\27\1\0\1\10\1\0\22\27\1\u0102\32\27\1\u0102"+
    "\7\27\1\0\1\27\10\0\2\10\4\0\1\27\1\10"+
    "\2\27\1\0\1\10\1\0\21\27\1\u0103\32\27\1\u0103"+
    "\10\27\1\0\1\27\10\0\2\10\4\0\1\27\1\10"+
    "\2\27\1\0\1\10\1\0\1\u0104\32\27\1\u0104\31\27"+
    "\1\0\1\27\10\0\2\10\4\0\1\27\1\10\2\27"+
    "\1\0\1\10\1\0\15\27\1\u0105\32\27\1\u0105\14\27"+
    "\1\0\1\27\10\0\2\10\4\0\1\27\1\10\2\27"+
    "\1\0\1\10\1\0\26\27\1\u0106\32\27\1\u0106\3\27"+
    "\1\0\1\27\20\0\2\u0107\3\0\32\u0107\53\0\1\u0108"+
    "\105\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\16\27\1\u0109\32\27\1\u0109\13\27\1\0\1\27"+
    "\10\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\16\27\1\u010a\32\27\1\u010a\13\27\1\0\1\27"+
    "\10\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\21\27\1\u010b\32\27\1\u010b\10\27\1\0\1\27"+
    "\10\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\16\27\1\u010c\32\27\1\u010c\13\27\1\0\1\27"+
    "\10\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\23\27\1\u010d\32\27\1\u010d\6\27\1\0\1\27"+
    "\10\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\16\27\1\u010e\32\27\1\u010e\13\27\1\0\1\27"+
    "\10\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\2\27\1\u010f\32\27\1\u010f\27\27\1\0\1\27"+
    "\10\0\2\10\4\0\1\27\1\10\2\27\1\0\1\10"+
    "\1\0\1\u0110\32\27\1\u0110\31\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\4\27\1\u0111\32\27\1\u0111\25\27\1\0\1\27\10\0"+
    "\2\10\4\0\1\27\1\10\2\27\1\0\1\10\1\0"+
    "\1\u0112\32\27\1\u0112\31\27\1\0\1\27\10\0\2\10"+
    "\4\0\1\27\1\10\2\27\1\0\1\10\1\0\10\27"+
    "\1\u0113\32\27\1\u0113\21\27\1\0\1\27\10\0\2\10"+
    "\4\0\1\27\1\10\2\27\1\0\1\10\1\0\1\u0114"+
    "\32\27\1\u0114\31\27\1\0\1\27\10\0\2\10\4\0"+
    "\1\27\1\10\2\27\1\0\1\10\1\0\30\27\1\u0115"+
    "\32\27\1\u0115\1\27\1\0\1\27\10\0\2\10\4\0"+
    "\1\27\1\10\2\27\1\0\1\10\1\0\12\27\1\u0116"+
    "\32\27\1\u0116\17\27\1\0\1\27\10\0\2\10\4\0"+
    "\1\27\1\10\2\27\1\0\1\10\1\0\4\27\1\u0117"+
    "\32\27\1\u0117\25\27\1\0\1\27\10\0\2\10\4\0"+
    "\1\27\1\10\2\27\1\0\1\10\1\0\13\27\1\u0118"+
    "\32\27\1\u0118\16\27\1\0\1\27\10\0\2\10\4\0"+
    "\1\27\1\10\2\27\1\0\1\10\1\0\1\u0119\32\27"+
    "\1\u0119\31\27\1\0\1\27\24\0\1\u011a\77\0\2\10"+
    "\4\0\1\27\1\10\2\27\1\0\1\10\1\0\24\27"+
    "\1\u011b\32\27\1\u011b\5\27\1\0\1\27\10\0\2\10"+
    "\4\0\1\27\1\10\2\27\1\0\1\10\1\0\27\27"+
    "\1\u011c\32\27\1\u011c\2\27\1\0\1\27\10\0\2\10"+
    "\4\0\1\27\1\10\2\27\1\0\1\10\1\0\15\27"+
    "\1\u011d\32\27\1\u011d\14\27\1\0\1\27\10\0\2\10"+
    "\4\0\1\27\1\10\2\27\1\0\1\10\1\0\15\27"+
    "\1\u011e\32\27\1\u011e\14\27\1\0\1\27\10\0\2\10"+
    "\4\0\1\27\1\10\2\27\1\0\1\10\1\0\23\27"+
    "\1\u011f\32\27\1\u011f\6\27\1\0\1\27\10\0\2\10"+
    "\4\0\1\27\1\10\2\27\1\0\1\10\1\0\21\27"+
    "\1\u0120\32\27\1\u0120\10\27\1\0\1\27\10\0\2\10"+
    "\4\0\1\27\1\10\2\27\1\0\1\10\1\0\14\27"+
    "\1\u0121\32\27\1\u0121\15\27\1\0\1\27\10\0\2\10"+
    "\4\0\1\27\1\10\2\27\1\0\1\10\1\0\31\27"+
    "\1\u0122\32\27\1\u0122\1\0\1\27\10\0\2\10\1\u0123"+
    "\3\0\1\27\1\10\2\27\1\0\1\10\1\0\65\27"+
    "\1\0\1\27\10\0\2\10\4\0\1\27\1\10\2\27"+
    "\1\0\1\10\1\0\21\27\1\u0124\32\27\1\u0124\10\27"+
    "\1\0\1\27\10\0\2\10\4\0\1\27\1\10\2\27"+
    "\1\0\1\10\1\0\10\27\1\u0125\32\27\1\u0125\21\27"+
    "\1\0\1\27\10\0\2\10\4\0\1\27\1\10\2\27"+
    "\1\0\1\10\1\0\15\27\1\u0126\32\27\1\u0126\14\27"+
    "\1\0\1\27\10\0\2\10\4\0\1\27\1\10\2\27"+
    "\1\0\1\10\1\0\4\27\1\u0127\32\27\1\u0127\25\27"+
    "\1\0\1\27\10\0\2\10\4\0\1\27\1\10\2\27"+
    "\1\0\1\10\1\0\4\27\1\u0128\32\27\1\u0128\25\27"+
    "\1\0\1\27\10\0\2\10\4\0\1\27\1\10\2\27"+
    "\1\0\1\10\1\0\10\27\1\u0129\32\27\1\u0129\21\27"+
    "\1\0\1\27\10\0\2\10\4\0\1\27\1\10\2\27"+
    "\1\0\1\10\1\0\4\27\1\u012a\32\27\1\u012a\25\27"+
    "\1\0\1\27\13\0\1\u012b\110\0\2\10\4\0\1\27"+
    "\1\10\2\27\1\0\1\10\1\0\10\27\1\u012c\32\27"+
    "\1\u012c\21\27\1\0\1\27\10\0\2\10\4\0\1\27"+
    "\1\10\2\27\1\0\1\10\1\0\6\27\1\u012d\32\27"+
    "\1\u012d\23\27\1\0\1\27\10\0\2\10\4\0\1\27"+
    "\1\10\2\27\1\0\1\10\1\0\3\27\1\u012e\32\27"+
    "\1\u012e\26\27\1\0\1\27\10\0\2\10\4\0\1\27"+
    "\1\10\2\27\1\0\1\10\1\0\3\27\1\u012f\32\27"+
    "\1\u012f\26\27\1\0\1\27\10\0\2\10\4\0\1\27"+
    "\1\10\2\27\1\0\1\10\1\0\1\u0130\32\27\1\u0130"+
    "\31\27\1\0\1\27\10\0\2\10\4\0\1\27\1\10"+
    "\2\27\1\0\1\10\1\0\13\27\1\u0131\32\27\1\u0131"+
    "\16\27\1\0\1\27\10\0\2\10\4\0\1\27\1\10"+
    "\2\27\1\0\1\10\1\0\5\27\1\u0132\32\27\1\u0132"+
    "\24\27\1\0\1\27\10\0\2\10\4\0\1\27\1\10"+
    "\2\27\1\0\1\10\1\0\15\27\1\u0133\32\27\1\u0133"+
    "\14\27\1\0\1\27\10\0\2\10\4\0\1\27\1\10"+
    "\2\27\1\0\1\10\1\0\30\27\1\u0134\32\27\1\u0134"+
    "\1\27\1\0\1\27";

  private static int [] zzUnpacktrans() {
    int [] result = new int[17632];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\1\11\3\1\4\11\34\1\1\11"+
    "\1\0\3\1\1\0\1\11\1\1\1\11\43\1\2\11"+
    "\1\1\1\0\1\1\1\0\60\1\2\0\64\1\2\0"+
    "\45\1\2\0\34\1\1\11\1\0\21\1\1\11\10\1"+
    "\1\0\7\1\1\11\11\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[308];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Symbols.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error: Caracter no valido: " + yytext());
            }
          // fall through
          case 85: break;
          case 2:
            { /* Ignorar espacios en blanco */
            }
          // fall through
          case 86: break;
          case 3:
            { System.out.println("Recognized: !"); return new Symbol(Symbols.Not);
            }
          // fall through
          case 87: break;
          case 4:
            { System.out.println("Recognized: \""); return new Symbol(Symbols.Quotes);
            }
          // fall through
          case 88: break;
          case 5:
            { System.out.println("Recognized: linkVal"); return new Symbol(Symbols.Link);
            }
          // fall through
          case 89: break;
          case 6:
            { System.out.println("Recognized: ("); return new Symbol(Symbols.ParOpen);
            }
          // fall through
          case 90: break;
          case 7:
            { System.out.println("Recognized: )"); return new Symbol(Symbols.ParClose);
            }
          // fall through
          case 91: break;
          case 8:
            { System.out.println("Recognized: *"); return new Symbol(Symbols.Mult);
            }
          // fall through
          case 92: break;
          case 9:
            { System.out.println("Recognized: +"); return new Symbol(Symbols.Plus);
            }
          // fall through
          case 93: break;
          case 10:
            { System.out.println("Recognized: -"); return new Symbol(Symbols.Minus);
            }
          // fall through
          case 94: break;
          case 11:
            { System.out.println("Recognized: /"); return new Symbol(Symbols.Div);
            }
          // fall through
          case 95: break;
          case 12:
            { System.out.println("Recognized: number"); return new Symbol(Symbols.Number);
            }
          // fall through
          case 96: break;
          case 13:
            { System.out.println("Recognized: <"); return new Symbol(Symbols.LessThan);
            }
          // fall through
          case 97: break;
          case 14:
            { System.out.println("Recognized: ="); return new Symbol(Symbols.Assign);
            }
          // fall through
          case 98: break;
          case 15:
            { System.out.println("Recognized: >"); return new Symbol(Symbols.GreaterThan);
            }
          // fall through
          case 99: break;
          case 16:
            { System.out.println("Recognized: textVal"); return new Symbol(Symbols.Text);
            }
          // fall through
          case 100: break;
          case 17:
            { System.out.println("Recognized: Comment1"); return new Symbol(Symbols.Comment1);
            }
          // fall through
          case 101: break;
          case 18:
            { System.out.println("Recognized: !="); return new Symbol(Symbols.NotEqual);
            }
          // fall through
          case 102: break;
          case 19:
            { System.out.println("Recognized: &&"); return new Symbol(Symbols.And);
            }
          // fall through
          case 103: break;
          case 20:
            { System.out.println("Recognized: <="); return new Symbol(Symbols.LessEqual);
            }
          // fall through
          case 104: break;
          case 21:
            { System.out.println("Recognized: =="); return new Symbol(Symbols.Equal);
            }
          // fall through
          case 105: break;
          case 22:
            { System.out.println("Recognized: >="); return new Symbol(Symbols.GreaterEqual);
            }
          // fall through
          case 106: break;
          case 23:
            { System.out.println("Recognized: id"); return new Symbol(Symbols.id);
            }
          // fall through
          case 107: break;
          case 24:
            { System.out.println("Recognized: ||"); return new Symbol(Symbols.Or);
            }
          // fall through
          case 108: break;
          case 25:
            { System.out.println("Recognized: fontSize"); return new Symbol(Symbols.FontSize);
            }
          // fall through
          case 109: break;
          case 26:
            { System.out.println("Recognized: alt"); return new Symbol(Symbols.altSentence);
            }
          // fall through
          case 110: break;
          case 27:
            { System.out.println("Recognized: C_P"); return new Symbol(Symbols.P);
            }
          // fall through
          case 111: break;
          case 28:
            { System.out.println("Recognized: red"); return new Symbol(Symbols.Color);
            }
          // fall through
          case 112: break;
          case 29:
            { System.out.println("Recognized: aqua"); return new Symbol(Symbols.Color);
            }
          // fall through
          case 113: break;
          case 30:
            { System.out.println("Recognized: blue"); return new Symbol(Symbols.Color);
            }
          // fall through
          case 114: break;
          case 31:
            { System.out.println("Recognized: cols"); return new Symbol(Symbols.ColsSentence);
            }
          // fall through
          case 115: break;
          case 32:
            { System.out.println("Recognized: C_BR"); return new Symbol(Symbols.BR);
            }
          // fall through
          case 116: break;
          case 33:
            { System.out.println("Recognized: C_CC"); return new Symbol(Symbols.HTML);
            }
          // fall through
          case 117: break;
          case 34:
            { System.out.println("Recognized: C_H1"); return new Symbol(Symbols.H1);
            }
          // fall through
          case 118: break;
          case 35:
            { System.out.println("Recognized: gray"); return new Symbol(Symbols.Color);
            }
          // fall through
          case 119: break;
          case 36:
            { System.out.println("Recognized: href"); return new Symbol(Symbols.href);
            }
          // fall through
          case 120: break;
          case 37:
            { System.out.println("Recognized: left"); return new Symbol(Symbols.TextAlign);
            }
          // fall through
          case 121: break;
          case 38:
            { System.out.println("Recognized: lime"); return new Symbol(Symbols.Color);
            }
          // fall through
          case 122: break;
          case 39:
            { System.out.println("Recognized: name"); return new Symbol(Symbols.name);
            }
          // fall through
          case 123: break;
          case 40:
            { System.out.println("Recognized: navy"); return new Symbol(Symbols.Color);
            }
          // fall through
          case 124: break;
          case 41:
            { System.out.println("Recognized: rows"); return new Symbol(Symbols.RowsSentence);
            }
          // fall through
          case 125: break;
          case 42:
            { System.out.println("Recognized: teal"); return new Symbol(Symbols.Color);
            }
          // fall through
          case 126: break;
          case 43:
            { System.out.println("Recognized: text"); return new Symbol(Symbols.Type);
            }
          // fall through
          case 127: break;
          case 44:
            { System.out.println("Recognized: type"); return new Symbol(Symbols.TypeSentence);
            }
          // fall through
          case 128: break;
          case 45:
            { System.out.println("Recognized: Arial"); return new Symbol(Symbols.FontFamily);
            }
          // fall through
          case 129: break;
          case 46:
            { System.out.println("Recognized: black"); return new Symbol(Symbols.Color);
            }
          // fall through
          case 130: break;
          case 47:
            { System.out.println("Recognized: color"); return new Symbol(Symbols.ColorSentence);
            }
          // fall through
          case 131: break;
          case 48:
            { System.out.println("Recognized: C_DIV"); return new Symbol(Symbols.DIV);
            }
          // fall through
          case 132: break;
          case 49:
            { System.out.println("Recognized: C_IMG"); return new Symbol(Symbols.IMG);
            }
          // fall through
          case 133: break;
          case 50:
            { System.out.println("Recognized: green"); return new Symbol(Symbols.Color);
            }
          // fall through
          case 134: break;
          case 51:
            { System.out.println("Recognized: olive"); return new Symbol(Symbols.Color);
            }
          // fall through
          case 135: break;
          case 52:
            { System.out.println("Recognized: radio"); return new Symbol(Symbols.Type);
            }
          // fall through
          case 136: break;
          case 53:
            { System.out.println("Recognized: right"); return new Symbol(Symbols.TextAlign);
            }
          // fall through
          case 137: break;
          case 54:
            { System.out.println("Recognized: white"); return new Symbol(Symbols.Color);
            }
          // fall through
          case 138: break;
          case 55:
            { System.out.println("Recognized: center"); return new Symbol(Symbols.TextAlign);
            }
          // fall through
          case 139: break;
          case 56:
            { System.out.println("Recognized: C_BODY"); return new Symbol(Symbols.BODY);
            }
          // fall through
          case 140: break;
          case 57:
            { System.out.println("Recognized: C_HEAD"); return new Symbol(Symbols.HEAD);
            }
          // fall through
          case 141: break;
          case 58:
            { System.out.println("Recognized: C_LINK"); return new Symbol(Symbols.LINK);
            }
          // fall through
          case 142: break;
          case 59:
            { System.out.println("Recognized: C_SPAN"); return new Symbol(Symbols.SPAN);
            }
          // fall through
          case 143: break;
          case 60:
            { System.out.println("Recognized: Geneva"); return new Symbol(Symbols.FontFamily);
            }
          // fall through
          case 144: break;
          case 61:
            { System.out.println("Recognized: maroon"); return new Symbol(Symbols.Color);
            }
          // fall through
          case 145: break;
          case 62:
            { System.out.println("Recognized: number"); return new Symbol(Symbols.Type);
            }
          // fall through
          case 146: break;
          case 63:
            { System.out.println("Recognized: purple"); return new Symbol(Symbols.Color);
            }
          // fall through
          case 147: break;
          case 64:
            { System.out.println("Recognized: silver"); return new Symbol(Symbols.Color);
            }
          // fall through
          case 148: break;
          case 65:
            { System.out.println("Recognized: yellow"); return new Symbol(Symbols.Color);
            }
          // fall through
          case 149: break;
          case 66:
            { System.out.println("Recognized: hexadecimal"); return new Symbol(Symbols.Hexadecimal);
            }
          // fall through
          case 150: break;
          case 67:
            { System.out.println("Recognized: Courier"); return new Symbol(Symbols.FontFamily);
            }
          // fall through
          case 151: break;
          case 68:
            { System.out.println("Recognized: C_INPUT"); return new Symbol(Symbols.INPUT);
            }
          // fall through
          case 152: break;
          case 69:
            { System.out.println("Recognized: C_TITLE"); return new Symbol(Symbols.TITLE);
            }
          // fall through
          case 153: break;
          case 70:
            { System.out.println("Recognized: fuchsia"); return new Symbol(Symbols.Color);
            }
          // fall through
          case 154: break;
          case 71:
            { System.out.println("Recognized: justify"); return new Symbol(Symbols.TextAlign);
            }
          // fall through
          case 155: break;
          case 72:
            { System.out.println("Recognized: Verdana"); return new Symbol(Symbols.FontFamily);
            }
          // fall through
          case 156: break;
          case 73:
            { System.out.println("Recognized: Comment2"); return new Symbol(Symbols.Comment2);
            }
          // fall through
          case 157: break;
          case 74:
            { System.out.println("Recognized: checkbox"); return new Symbol(Symbols.Type);
            }
          // fall through
          case 158: break;
          case 75:
            { System.out.println("Recognized: C_BUTTON"); return new Symbol(Symbols.BUTTON);
            }
          // fall through
          case 159: break;
          case 76:
            { System.out.println("Recognized: C_OPTION"); return new Symbol(Symbols.OPTION);
            }
          // fall through
          case 160: break;
          case 77:
            { System.out.println("Recognized: font-size"); return new Symbol(Symbols.FontSizeSentence);
            }
          // fall through
          case 161: break;
          case 78:
            { System.out.println("Recognized: onclick()"); return new Symbol(Symbols.onclickSentence);
            }
          // fall through
          case 162: break;
          case 79:
            { System.out.println("Recognized: background"); return new Symbol(Symbols.Background);
            }
          // fall through
          case 163: break;
          case 80:
            { System.out.println("Recognized: C_SELECTED"); return new Symbol(Symbols.SELECT);
            }
          // fall through
          case 164: break;
          case 81:
            { System.out.println("Recognized: C_TEXTAREA"); return new Symbol(Symbols.TEXTAREA);
            }
          // fall through
          case 165: break;
          case 82:
            { System.out.println("Recognized: sans-serif"); return new Symbol(Symbols.FontFamily);
            }
          // fall through
          case 166: break;
          case 83:
            { System.out.println("Recognized: text-align"); return new Symbol(Symbols.TextAlignSentence);
            }
          // fall through
          case 167: break;
          case 84:
            { System.out.println("Recognized: font-family"); return new Symbol(Symbols.FontFamilySentence);
            }
          // fall through
          case 168: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
